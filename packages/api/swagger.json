{
  "openapi": "3.0.1",
  "info": {
    "title": "Front Financial Integration Catalog API",
    "description": "Front Integration Catalog allows users of client applications to connect accounts of financial institutions. Front Integration Catalog handles credential validation, multi-factor authentication, and error handling for each institution. After the account is connected, Front Integration Catalog allows client applications to get account information, such as holdings, transactions, balances.",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://front-b2b-api-test.azurewebsites.net"
    }
  ],
  "paths": {
    "/api/v1/balance/get": {
      "post": {
        "tags": [
          "Balance"
        ],
        "summary": "Get account balance",
        "description": "Get real-time account fiat balances.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerAccountBalanceModelIApiResult"
                },
                "example": {
                  "content": {
                    "balances": [
                      {
                        "cash": 158.5,
                        "buyingPower": 258.5,
                        "currencyCode": "USD"
                      },
                      { "cash": 10, "buyingPower": 10, "currencyCode": "EUR" }
                    ]
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/balance/portfolio": {
      "get": {
        "tags": ["Balance"],
        "summary": "Get aggregated portfolio fiat balances",
        "description": "Get cached aggregated fiat balances from all connected integrations.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "End user ID to get the aggregated portfolio for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPortfolioModelIApiResult"
                },
                "example": {
                  "content": {
                    "fiatBalances": [
                      { "symbol": "USD", "cash": 3.099, "buyingPower": 3.099 },
                      {
                        "symbol": "EUR",
                        "cash": -102.88,
                        "buyingPower": 1293.596
                      }
                    ]
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/frontscore/get": {
      "get": {
        "tags": ["FrontScore"],
        "summary": "Get portfolio Front Score",
        "description": "Get portfolio health measurement.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Id of the end user to get the Front Score of the aggregated portfolio for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Front Score calculated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPortfolioFiscoIApiResult"
                },
                "example": {
                  "content": {
                    "frontScore": 608,
                    "totalScore": "fair",
                    "maxFrontScore": 850,
                    "minFrontScore": 300,
                    "financialScore": "good",
                    "performanceScore": "good",
                    "newsScore": "good",
                    "predictionScore": "poor",
                    "residualReturnScore": "poor",
                    "diversificationScore": "fair",
                    "esgScore": "exceptional",
                    "isEsgScoreApplied": true,
                    "isFinancialScoreApplied": true,
                    "isPerformanceScoreApplied": true,
                    "isNewsScoreApplied": true,
                    "isPredictionScoreApplied": true,
                    "isResidualReturnScoreApplied": true,
                    "isDiversificationScoreApplied": true
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": { "status": "ok" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/frontscore/cryptocurrency": {
      "get": {
        "tags": ["FrontScore"],
        "summary": "Get cryptocurrency Front Score",
        "description": "Get cryptocurrency health measurement.",
        "parameters": [
          {
            "name": "Symbols",
            "in": "query",
            "description": "List of cryptocurrency symbols to get Front Score for",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Optional end user id for compatibility score",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Front Score calculated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BCryptocurrencyFiscoIReadOnlyCollectionIApiResult"
                },
                "example": {
                  "content": [
                    {
                      "symbol": "BTC",
                      "frontScore": {
                        "frontScore": 608,
                        "totalScore": "fair",
                        "isCompatibilityScoreApplied": false
                      }
                    },
                    {
                      "symbol": "ETH",
                      "frontScore": {
                        "frontScore": 618,
                        "totalScore": "fair",
                        "isCompatibilityScoreApplied": false
                      }
                    }
                  ],
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": { "status": "ok" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/frontscore/equity": {
      "get": {
        "tags": ["FrontScore"],
        "summary": "Get stock Front Score",
        "description": "Get equity health measurement.",
        "parameters": [
          {
            "name": "Symbols",
            "in": "query",
            "description": "List of equity symbols to get Front Score for",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "Optional end user id for compatibility score",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Front Score calculated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BStockFiscoIReadOnlyCollectionIApiResult"
                },
                "example": {
                  "content": [
                    {
                      "symbol": "AAPL",
                      "frontScore": {
                        "frontScore": 608,
                        "totalScore": "fair",
                        "maxFrontScore": 850,
                        "minFrontScore": 300,
                        "financialScore": "good",
                        "performanceScore": "good",
                        "newsScore": "good",
                        "predictionScore": "poor",
                        "residualReturnScore": "poor",
                        "esgScore": "exceptional",
                        "isCompatibilityScoreApplied": false,
                        "isEsgScoreApplied": true,
                        "isFinancialScoreApplied": true,
                        "isPerformanceScoreApplied": true,
                        "isNewsScoreApplied": true,
                        "isPredictionScoreApplied": true,
                        "isResidualReturnScoreApplied": true,
                        "isDiversificationScoreApplied": false
                      }
                    },
                    {
                      "symbol": "ETH",
                      "frontScore": {
                        "frontScore": 608,
                        "totalScore": "fair",
                        "maxFrontScore": 850,
                        "minFrontScore": 300,
                        "financialScore": "good",
                        "performanceScore": "good",
                        "newsScore": "good",
                        "predictionScore": "poor",
                        "residualReturnScore": "poor",
                        "esgScore": "exceptional",
                        "isCompatibilityScoreApplied": false,
                        "isEsgScoreApplied": true,
                        "isFinancialScoreApplied": true,
                        "isPerformanceScoreApplied": true,
                        "isNewsScoreApplied": true,
                        "isPredictionScoreApplied": true,
                        "isResidualReturnScoreApplied": true,
                        "isDiversificationScoreApplied": false
                      }
                    }
                  ],
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": { "status": "ok" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/cataloglink": {
      "get": {
        "tags": ["Integrations"],
        "summary": "Get catalog link",
        "description": "Get personalized catalog link for client",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "A unique Id representing the end user. Typically this will be a user Id from the\r\n            client application. Personally identifiable information, such as an email address or phone number,\r\n            should not be used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brokerType",
            "in": "query",
            "description": "Type of broker to redirect to. Will redirect to catalog if not provided.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerType"
                }
              ]
            }
          },
          {
            "name": "callbackUrl",
            "in": "query",
            "description": "Callback link - url to redirect user after authentication in brokerage account.\r\nIf not provided default client's url will be used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Catalog link created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogLinkIApiResult"
                },
                "example": {
                  "content": {
                    "url": "https://web.getfront.com/broker-connect?auth_code={authCode}",
                    "iFrameUrl": "https://web.getfront.com/b2b-iframe/{clientId}/broker-connect?auth_code={authCode}"
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "404": {
            "description": "API Client not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "notFound",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest can happen in following cases:\r\n<list type=\"number\"><item><description>userId parameter not specified</description></item><item><description>Callback url parameter is invalid</description></item><item><description>Client does not have callback url specified</description></item></list>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/token/refresh": {
      "post": {
        "tags": ["Integrations"],
        "summary": "Refresh auth token",
        "description": "Refresh auth token of the connected institution.\r\nSome institutions do not require tokens to be refreshed.\r\n            \r\nThe following institutions require custom flows:\r\n            \r\nWeBull: AuthToken should be provided along with the RefreshToken\r\n            \r\nTdAmeritrade: refresh token should also be refreshed.\r\nCreateNewRefreshToken parameter should be set to true in order\r\nto refresh the refresh token for TdAmeritrade.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerRefreshTokenRequest"
                  }
                ]
              },
              "example": {
                "refreshToken": "Secret refresh token",
                "type": "coinbase"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerRefreshTokenResponseIApiResult"
                },
                "example": {
                  "content": {
                    "status": "succeeded",
                    "accessToken": "New secret token",
                    "refreshToken": "New secret refresh token",
                    "expiresInSeconds": 86400
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Unauthorized token",
                  "displayMessage": "Could not refresh the authentication token. The provided data is not correct"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/account": {
      "delete": {
        "tags": ["Integrations"],
        "summary": "Remove connection",
        "description": "Remove connection to the financial institution and erase all related data completely.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IApiResult"
                },
                "example": { "status": "ok" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/status": {
      "get": {
        "tags": ["Integrations"],
        "summary": "Get health status",
        "description": "Get the list of supported institutions and their health statuses.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokersHealthStatusListIApiResult"
                },
                "example": {
                  "content": [
                    {
                      "type": "robinhood",
                      "isUp": true,
                      "supportedProducts": [
                        "balance",
                        "holdings",
                        "identity",
                        "orders",
                        "transfers"
                      ]
                    },
                    {
                      "type": "celsius",
                      "isUp": false,
                      "description": "Temporarily disabled",
                      "downTimeStart": 1655891444,
                      "supportedProducts": [
                        "balance",
                        "orders",
                        "transfers",
                        "holdings"
                      ]
                    }
                  ],
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/authenticationSchemes": {
      "get": {
        "tags": ["Integrations"],
        "summary": "Get authentication schemes",
        "description": "Get authentication schemes of available integrations to perform authentication programmatically (not using\r\nthe Web Catalog UI).",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerAuthenticationSchemeIReadOnlyCollectionIApiResult"
                },
                "example": {
                  "content": [
                    {
                      "brokerType": "coinbasePro",
                      "authenticationSchemeType": "apiKey",
                      "initialAuthenticationModel": {
                        "fields": [
                          { "name": "Username", "description": "API key" },
                          { "name": "Password", "description": "Secret key" },
                          { "name": "AuthToken", "description": "Passphrase" },
                          { "name": "Type", "description": "CoinbasePro" }
                        ]
                      },
                      "mfaSchemes": [],
                      "instructionsUrl": "https://help.coinbase.com/en/pro/other-topics/api/how-do-i-create-an-api-key-for-coinbase-pro"
                    }
                  ],
                  "status": "ok",
                  "message": ""
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cryptocurrencyWallets": {
      "get": {
        "tags": ["Integrations"],
        "summary": "Get supported wallets",
        "description": "Get supported cryptocurrency wallets and cryptocurrency addresses to perform authentication programmatically (not using\r\nthe Web Catalog UI).",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrokerCryptocurrencyWalletListResponseIApiResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/authenticate": {
      "post": {
        "tags": ["Integrations"],
        "summary": "Authenticate user's account",
        "description": "Authenticate user's brokerage/exchange account programmatically (not using the Web Catalog UI)",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the end-user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerAuthRequest"
                  }
                ]
              },
              "example": {
                "username": "username",
                "password": "password",
                "mfaCode": "000000",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerAuthResponseIApiResult"
                },
                "example": {
                  "content": {
                    "status": "succeeded",
                    "accessToken": "Access token, allowing access to the integration",
                    "refreshToken": "Optional refresh token, allowing to refresh the access token",
                    "expiresInSeconds": 7200,
                    "account": {
                      "accountId": "Id of the account",
                      "accountName": "Name of the account"
                    }
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "503": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/v1/authenticate/{brokerType}": {
      "get": {
        "tags": ["Integrations"],
        "summary": "Get OAuth authentication link",
        "description": "Get OAuth link for the integrations with `OAuth` AuthenticationSchemeType",
        "parameters": [
          {
            "name": "brokerType",
            "in": "path",
            "description": "Type of the integration to connect",
            "required": true,
            "schema": {
              "enum": [
                "robinhood",
                "eTrade",
                "alpaca",
                "tdAmeritrade",
                "weBull",
                "stash",
                "interactiveBrokers",
                "public",
                "coinbase",
                "kraken",
                "coinbasePro",
                "cryptoCom",
                "openSea",
                "binanceUs",
                "gemini",
                "cryptocurrencyAddress",
                "cryptocurrencyWallet",
                "okCoin",
                "bittrex",
                "kuCoin",
                "etoro",
                "cexIo",
                "binanceInternational",
                "bitstamp",
                "gateIo",
                "celsius",
                "acorns",
                "okx",
                "bitFlyer",
                "coinlist",
                "huobi",
                "bitfinex"
              ],
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerType"
                }
              ]
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the end-user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerAuthPromptResponseIApiResult"
                },
                "example": {
                  "content": {
                    "status": "redirect",
                    "redirectLink": "https://front.org/",
                    "linkToken": "Link to the integration's site"
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/news/stock": {
      "get": {
        "tags": ["News"],
        "summary": "Retrieve news related to the symbol in the request",
        "description": "Retrieve news related to the symbol in the request.",
        "parameters": [
          {
            "name": "From",
            "in": "query",
            "description": "Lower timestamp limit of the news. If not speciefied news will be returned from the last 7 days.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "To",
            "in": "query",
            "description": "Upper timestamp limit of the news. If not speciefied news will be returned up to the current time.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Symbol",
            "in": "query",
            "description": "Specifies which symbol's news should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "The number of news to return. If not specified the maximum 25 value will be used.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The offset which is used for paginatin the result set.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Order",
            "in": "query",
            "description": "Specifies the sorting criteria of the news. By default the most relevant news will be returned first.",
            "schema": {
              "enum": ["rank", "timestamp"],
              "allOf": [
                {
                  "$ref": "#/components/schemas/B2BSymbolNewsOrder"
                }
              ]
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Specifies the soring direction of the result set.",
            "schema": {
              "enum": ["ascending", "descending"],
              "allOf": [
                {
                  "$ref": "#/components/schemas/B2BSymbolNewsSortingDirection"
                }
              ]
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of news related to the symbol.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSymbolNewsResponseIApiResult"
                },
                "example": {
                  "content": {
                    "news": [
                      {
                        "id": "2ddff79f-5861-467a-a1f7-3f19ad4c1bba",
                        "title": "Freshpet, Inc. (NASDAQ:FRPT) Shares Sold by Asset Management One Co. Ltd. - Armenian Reporter",
                        "content": "Freshpet, Inc. (NASDAQ:FRPT) Shares Sold by Asset Management One Co. Ltd. - Armenian Reporter",
                        "imageUrl": "https://www.americanbankingnews.com/wp-content/timthumb/timthumb.php?src=https://www.marketbeat.com/logos/freshpet-inc-logo.png&w=240&h=240&zc=2",
                        "source": "AmericanBankingNews",
                        "sourceUrl": "https://www.americanbankingnews.com",
                        "createdTimestamp": 1665568346,
                        "url": "https://reporter.am/2022/10/24/freshpet-inc-nasdaqfrpt-shares-sold-by-asset-management-one-co-ltd.html",
                        "rank": 0,
                        "symbols": ["FRPT"]
                      }
                    ],
                    "count": 0
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": { "status": "ok" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/news/cryptocurrency": {
      "get": {
        "tags": ["News"],
        "summary": "Retrieve news related to the cryptocurrency symbol in the request",
        "description": "Retrieve news related to the symbol in the request.",
        "parameters": [
          {
            "name": "From",
            "in": "query",
            "description": "Lower timestamp limit of the news. If not speciefied news will be returned from the last 7 days.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "To",
            "in": "query",
            "description": "Upper timestamp limit of the news. If not speciefied news will be returned up to the current time.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Symbol",
            "in": "query",
            "description": "Specifies which symbol's news should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "The number of news to return. If not specified the maximum 25 value will be used.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "The offset which is used for paginatin the result set.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Order",
            "in": "query",
            "description": "Specifies the sorting criteria of the news. By default the most relevant news will be returned first.",
            "schema": {
              "enum": ["rank", "timestamp"],
              "allOf": [
                {
                  "$ref": "#/components/schemas/B2BSymbolNewsOrder"
                }
              ]
            }
          },
          {
            "name": "SortDirection",
            "in": "query",
            "description": "Specifies the soring direction of the result set.",
            "schema": {
              "enum": ["ascending", "descending"],
              "allOf": [
                {
                  "$ref": "#/components/schemas/B2BSymbolNewsSortingDirection"
                }
              ]
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of news related to the symbol.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BSymbolNewsResponseIApiResult"
                },
                "example": {
                  "content": {
                    "news": [
                      {
                        "id": "2ddff79f-5861-467a-a1f7-3f19ad4c1bba",
                        "title": "Freshpet, Inc. (NASDAQ:FRPT) Shares Sold by Asset Management One Co. Ltd. - Armenian Reporter",
                        "content": "Freshpet, Inc. (NASDAQ:FRPT) Shares Sold by Asset Management One Co. Ltd. - Armenian Reporter",
                        "imageUrl": "https://www.americanbankingnews.com/wp-content/timthumb/timthumb.php?src=https://www.marketbeat.com/logos/freshpet-inc-logo.png&w=240&h=240&zc=2",
                        "source": "AmericanBankingNews",
                        "sourceUrl": "https://www.americanbankingnews.com",
                        "createdTimestamp": 1665568346,
                        "url": "https://reporter.am/2022/10/24/freshpet-inc-nasdaqfrpt-shares-sold-by-asset-management-one-co-ltd.html",
                        "rank": 0,
                        "symbols": ["FRPT"]
                      }
                    ],
                    "count": 0
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": { "status": "ok" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/holdings/get": {
      "post": {
        "tags": ["Portfolio"],
        "summary": "Get holdings",
        "description": "Obtain assets from the connected investment account. Performs realtime API call to the underlying integration.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Holdings obtained",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerPortfolioModelIApiResult"
                },
                "example": {
                  "content": {
                    "status": "succeeded",
                    "equityPositions": [
                      { "symbol": "AAPL", "amount": 3, "costBasis": 109 },
                      { "symbol": "F", "amount": 27, "costBasis": 7.05791 }
                    ],
                    "notSupportedEquityPositions": [
                      { "symbol": "CUSIP38259P508", "amount": 1 }
                    ],
                    "notSupportedCryptocurrencyPositions": [],
                    "cryptocurrencyPositions": [
                      { "symbol": "DOGE", "amount": 1503, "costBasis": 0.033 },
                      {
                        "symbol": "BTC",
                        "amount": 3.0001672,
                        "costBasis": 18000
                      }
                    ],
                    "nftPositions": [],
                    "optionPositions": [],
                    "type": "robinhood",
                    "accountId": "5FUVPB0",
                    "institutionName": "Robinhood",
                    "accountName": "Margin account"
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/holdings/optimize": {
      "get": {
        "tags": ["Portfolio"],
        "summary": "Get optimized portfolio",
        "description": "Get suggested portfolio optimizations based on different annualized standard deviations and performance.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "Id of the end user to get the optimization of the aggregated portfolio for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio optimized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPortfolioOptimizationModelIApiResult"
                },
                "example": {
                  "content": {
                    "originalPortfolio": {
                      "startingValue": 185.02,
                      "annualizedStandardDeviation": 0.5,
                      "performance": -0.58,
                      "assetWeights": [
                        { "symbol": "DOGE", "weight": 0.073, "isCrypto": true },
                        { "symbol": "BTC", "weight": 0.214, "isCrypto": true }
                      ],
                      "value": 82.005,
                      "chartItems": [
                        { "value": 1, "date": "2022-04-12" },
                        { "value": 1.0237, "date": "2022-04-13" },
                        { "value": 0.995, "date": "2022-04-14" }
                      ]
                    },
                    "optimizedPortfolios": [
                      {
                        "annualizedStandardDeviation": 0.2032,
                        "performance": -0.1921,
                        "assetWeights": [
                          {
                            "symbol": "DOGE",
                            "weight": 0.0938,
                            "isCrypto": true
                          },
                          {
                            "symbol": "BTC",
                            "weight": 0.0114,
                            "isCrypto": true
                          }
                        ],
                        "value": 149.4827,
                        "chartItems": [
                          { "value": 1, "date": "2022-04-12" },
                          { "value": 1.0075, "date": "2022-04-13" },
                          { "value": 1.0044, "date": "2022-04-14" }
                        ]
                      },
                      {
                        "annualizedStandardDeviation": 0.2565,
                        "performance": -0.2629,
                        "assetWeights": [
                          {
                            "symbol": "DOGE",
                            "weight": 0.0648,
                            "isCrypto": true
                          },
                          {
                            "symbol": "BTC",
                            "weight": 0.0748,
                            "isCrypto": true
                          }
                        ],
                        "value": 136.3782,
                        "chartItems": [
                          { "value": 1, "date": "2022-04-12" },
                          { "value": 1.0098, "date": "2022-04-13" },
                          { "value": 1.0006, "date": "2022-04-14" }
                        ]
                      }
                    ]
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/holdings/portfolio": {
      "get": {
        "tags": ["Portfolio"],
        "summary": "Get aggregated portfolio",
        "description": "Get the aggregated portfolio of the user containing market values.",
        "parameters": [
          {
            "name": "UserId",
            "in": "query",
            "description": "End user ID to get the aggregated portfolio for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TimezoneOffset",
            "in": "query",
            "description": "Offset in second, used to calculate daily return for cryptocurrencies.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio obtained",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BPortfolioModelIApiResult"
                },
                "example": {
                  "content": {
                    "portfolioCostBasis": 1793.71,
                    "actualPortfolioPerformance": 6.9,
                    "equitiesValue": 1918.03,
                    "cryptocurrenciesValue": 1164.44,
                    "nftsValue": 0,
                    "equityPositions": [
                      {
                        "marketValue": 13.69,
                        "portfolioPercentage": 0.44,
                        "totalReturn": -1.3,
                        "returnPercentage": -8.67,
                        "lastPrice": 214.44,
                        "companyName": "Tesla",
                        "totalDailyReturn": 0.45,
                        "dailyReturnPercentage": 3.45,
                        "symbol": "TSLA",
                        "amount": 0.063,
                        "costBasis": 234.8
                      },
                      {
                        "marketValue": 1201.67,
                        "portfolioPercentage": 38.98,
                        "totalReturn": 144.97,
                        "returnPercentage": 13.71,
                        "lastPrice": 147.27,
                        "companyName": "Apple",
                        "totalDailyReturn": 31.65,
                        "dailyReturnPercentage": 2.7,
                        "symbol": "AAPL",
                        "amount": 8.15,
                        "costBasis": 129.5
                      }
                    ],
                    "cryptocurrencyPositions": [
                      {
                        "marketValue": 351.457,
                        "portfolioPercentage": 11.4018,
                        "totalReturn": -592.6533,
                        "returnPercentage": -62.7737,
                        "lastPrice": 1350.07,
                        "companyName": "Ethereum",
                        "totalDailyReturn": -3.6081,
                        "dailyReturnPercentage": -1.0162,
                        "symbol": "ETH",
                        "amount": 0.260325,
                        "costBasis": 3626.66
                      },
                      {
                        "marketValue": 240.5754,
                        "portfolioPercentage": 7.8,
                        "totalReturn": -85.45,
                        "returnPercentage": -26.2,
                        "lastPrice": 0.05977,
                        "companyName": "Dogecoin",
                        "totalDailyReturn": -2.45,
                        "dailyReturnPercentage": -1.0103,
                        "symbol": "DOGE",
                        "amount": 4025.02,
                        "costBasis": 0.081
                      }
                    ],
                    "nftPositions": []
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": { "status": "ok" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/list": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Get transactions",
        "description": "Get transactions on the account - the paginated history of the executed orders along with the pending orders.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerOrderListRequest"
                  }
                ]
              },
              "example": {
                "count": 20,
                "statuses": ["success"],
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transactions obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerOrderListResponseIApiResult"
                },
                "example": {
                  "content": {
                    "transactions": [
                      {
                        "id": "17EC1243-D91A-48B6-B0CE-ECFDB134F8A0",
                        "side": "buy",
                        "symbol": "AAPL",
                        "name": "APPLE INC",
                        "assetType": "option",
                        "paymentSymbol": "USD",
                        "paymentType": "fiat",
                        "amount": 1,
                        "price": 120,
                        "value": 120,
                        "createdTimestamp": 1653215676,
                        "updatedTimestamp": 1653215697,
                        "status": "success",
                        "orderType": "market",
                        "timeInForce": "goodForDay",
                        "brokerType": "robinhood",
                        "transactionType": "order",
                        "optionDetails": {
                          "optionType": "call",
                          "direction": "buyToOpen",
                          "strikePrice": 200,
                          "expirationTimestamp": 1673215697,
                          "numberOfSharesInContract": 100,
                          "complexOrderStrategyType": "NONE"
                        }
                      },
                      {
                        "id": "F9E932AE-A780-42F3-B887-82D888D594E5",
                        "side": "sell",
                        "symbol": "AAPL",
                        "name": "APPLE INC",
                        "assetType": "equity",
                        "paymentSymbol": "USD",
                        "paymentType": "fiat",
                        "amount": 2,
                        "price": 130,
                        "value": 260,
                        "createdTimestamp": 1651739676,
                        "updatedTimestamp": 1651739781,
                        "status": "success",
                        "orderType": "market",
                        "timeInForce": "goodTillCanceled",
                        "brokerType": "robinhood",
                        "transactionType": "order"
                      },
                      {
                        "id": "9B5827E4-7D08-4A71-B4C0-B1B4E5562592",
                        "side": "buy",
                        "symbol": "BTC",
                        "name": "Bitcoin",
                        "assetType": "cryptocurrency",
                        "paymentSymbol": "ETH",
                        "paymentType": "cryptocurrency",
                        "amount": 0.3,
                        "price": 18604.8197,
                        "value": 5581.44591,
                        "createdTimestamp": 1651739676,
                        "updatedTimestamp": 1651739781,
                        "status": "success",
                        "orderType": "limit",
                        "timeInForce": "goodTillCanceled",
                        "brokerType": "robinhood",
                        "transactionType": "order"
                      }
                    ],
                    "cursor": "N2VkZDI0MDMtNmRhYy01NThhLTk5NDUDYzI12M3GQ3ZmQ2",
                    "total": 3
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/details": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Get transaction details",
        "description": "Get details of an executed order. Typically used to poll the status of the previously executed order.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerOrderRequest"
                  }
                ]
              },
              "example": {
                "id": "17EC1243-D91A-48B6-B0CE-ECFDB134F8A0",
                "isCryptocurrency": true,
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transactions obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerOrderIApiResult"
                },
                "example": {
                  "id": "17EC1243-D91A-48B6-B0CE-ECFDB134F8A0",
                  "side": "buy",
                  "symbol": "AAPL",
                  "assetType": "equity",
                  "paymentType": "fiat",
                  "amount": 1,
                  "price": 120,
                  "value": 120,
                  "createdTimestamp": 1653215676,
                  "updatedTimestamp": 1653215697,
                  "status": "success",
                  "statusDetails": "",
                  "brokerType": "robinhood",
                  "transactionType": "order"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Transaction is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/featureList": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Get supported order features for institution",
        "description": "Get supported features for trading for a particular financial institution. Different institutions support different\r\nfeatures (e.g. different `OrderType` or different sets of `TimeInForce` values), so this endpoint is used to\r\ndescribe such features for provided financial institution.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerBaseRequest"
                  }
                ]
              },
              "example": {
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feature list obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerTradingFeatureInfoIApiResult"
                },
                "example": {
                  "content": {
                    "brokerType": "robinhood",
                    "accountId": "5K9N3VO1",
                    "cryptocurrencyOrders": {
                      "supported": true,
                      "supportsFiatCurrencyPayment": true,
                      "supportsCryptocurrencyPayment": false,
                      "supportsMarginOrders": true,
                      "supportedCryptocurrencySymbols": [
                        "BTC",
                        "ETH",
                        "SOL",
                        "DOGE"
                      ],
                      "supportedFiatCurrencies": ["USD"],
                      "marketType": {
                        "supported": true,
                        "supportsFractionalShares": true,
                        "supportsExtendedMarketHours": true,
                        "supportsPlacingBuyOrdersInFiatAmount": true,
                        "supportsPlacingSellOrdersInFiatAmount": true,
                        "supportedTimeInForceList": [
                          "fillOrKill",
                          "goodForDay",
                          "goodTillCanceled",
                          "immediateOrCancel"
                        ]
                      },
                      "limitType": {
                        "supported": true,
                        "supportsFractionalShares": true,
                        "supportsExtendedMarketHours": true,
                        "supportsPlacingBuyOrdersInFiatAmount": true,
                        "supportsPlacingSellOrdersInFiatAmount": true,
                        "supportedTimeInForceList": [
                          "goodForDay",
                          "goodTillCanceled",
                          "immediateOrCancel"
                        ]
                      },
                      "stopLossType": {
                        "supported": true,
                        "supportsFractionalShares": true,
                        "supportsExtendedMarketHours": true,
                        "supportsPlacingBuyOrdersInFiatAmount": true,
                        "supportsPlacingSellOrdersInFiatAmount": true,
                        "supportedTimeInForceList": [
                          "fillOrKill",
                          "goodForDay",
                          "goodTillCanceled",
                          "immediateOrCancel"
                        ]
                      }
                    },
                    "stockOrders": {
                      "supported": true,
                      "supportsFiatCurrencyPayment": true,
                      "supportsCryptocurrencyPayment": false,
                      "supportsMarginOrders": true,
                      "supportedFiatCurrencies": ["USD"],
                      "marketType": {
                        "supported": true,
                        "supportsFractionalShares": true,
                        "supportsExtendedMarketHours": true,
                        "supportsPlacingBuyOrdersInFiatAmount": true,
                        "supportsPlacingSellOrdersInFiatAmount": true,
                        "supportedTimeInForceList": [
                          "fillOrKill",
                          "goodForDay",
                          "goodTillCanceled",
                          "immediateOrCancel"
                        ]
                      },
                      "limitType": {
                        "supported": true,
                        "supportsFractionalShares": true,
                        "supportsExtendedMarketHours": true,
                        "supportsPlacingBuyOrdersInFiatAmount": true,
                        "supportsPlacingSellOrdersInFiatAmount": true,
                        "supportedTimeInForceList": [
                          "goodForDay",
                          "goodTillCanceled",
                          "immediateOrCancel"
                        ]
                      },
                      "stopLossType": {
                        "supported": true,
                        "supportsFractionalShares": true,
                        "supportsExtendedMarketHours": true,
                        "supportsPlacingBuyOrdersInFiatAmount": true,
                        "supportsPlacingSellOrdersInFiatAmount": true,
                        "supportedTimeInForceList": [
                          "fillOrKill",
                          "goodForDay",
                          "goodTillCanceled",
                          "immediateOrCancel"
                        ]
                      }
                    },
                    "status": "succeeded",
                    "supportsOrderPreview": true,
                    "supportsOrderCancellation": true,
                    "isIntegrationUp": true,
                    "isTradingSupported": true,
                    "fiatBalances": [
                      {
                        "cash": 1355,
                        "buyingPower": 1355,
                        "cryptocurrencyBuyingPower": 1355,
                        "currencyCode": "USD"
                      }
                    ]
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/preview/{side}": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Preview order execution",
        "description": "Validates the order information (such as necessary balance availability), and returns additional information,\r\nsuch as expected order fee.\r\nDoes not execute the order.",
        "parameters": [
          {
            "name": "side",
            "in": "path",
            "required": true,
            "schema": {
              "enum": ["unknown", "buy", "sell"],
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerOrderType"
                }
              ]
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerCreateOrderRequest"
                  }
                ]
              },
              "examples": {
                "Cryptocurrency Limit example": {
                  "value": {
                    "symbol": "ETH",
                    "paymentSymbol": "USD",
                    "amount": 1,
                    "price": 1200,
                    "isCryptocurrency": true,
                    "paymentIsCryptocurrency": false,
                    "amountIsFiat": false,
                    "extendedHours": false,
                    "orderType": "limit",
                    "timeInForce": "goodForDay",
                    "authToken": "Secret authentication token",
                    "type": "robinhood"
                  }
                },
                "Stock Market example": {
                  "value": {
                    "symbol": "AAPL",
                    "paymentSymbol": "USD",
                    "amount": 1,
                    "price": 0,
                    "isCryptocurrency": false,
                    "paymentIsCryptocurrency": false,
                    "amountIsFiat": false,
                    "extendedHours": false,
                    "orderType": "market",
                    "timeInForce": "goodTillCanceled",
                    "authToken": "Secret authentication token",
                    "type": "robinhood"
                  }
                },
                "Stock Fiat amount example ('buy TSLA for $10')": {
                  "value": {
                    "symbol": "TSLA",
                    "paymentSymbol": "USD",
                    "amount": 0,
                    "price": 0,
                    "isCryptocurrency": false,
                    "paymentIsCryptocurrency": false,
                    "amountIsFiat": true,
                    "amountInFiat": 10,
                    "extendedHours": false,
                    "orderType": "market",
                    "timeInForce": "goodTillCanceled",
                    "authToken": "Secret authentication token",
                    "type": "robinhood"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order preview obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerPreviewOrderResultIApiResult"
                },
                "example": {
                  "content": {
                    "brokerType": "robinhood",
                    "fee": 1.99,
                    "feeText": "",
                    "amount": 1,
                    "side": "buy",
                    "status": "success",
                    "paymentSymbol": "USD",
                    "paymentIsCryptocurrency": false,
                    "estimatedUnitPrice": 1200
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/{side}": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Execute order",
        "description": "Validates the order information and then calls institution's API to execute an order.\r\nIt's recommended to call this endpoint after calling the `preview` endpoint to make sure that the\r\norder execution request is correct.",
        "parameters": [
          {
            "name": "side",
            "in": "path",
            "required": true,
            "schema": {
              "enum": ["unknown", "buy", "sell"],
              "allOf": [
                {
                  "$ref": "#/components/schemas/BrokerOrderType"
                }
              ]
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerCreateOrderRequest"
                  }
                ]
              },
              "examples": {
                "Cryptocurrency Limit example": {
                  "value": {
                    "symbol": "ETH",
                    "paymentSymbol": "USD",
                    "amount": 1,
                    "price": 1200,
                    "isCryptocurrency": true,
                    "paymentIsCryptocurrency": false,
                    "amountIsFiat": false,
                    "extendedHours": false,
                    "orderType": "limit",
                    "timeInForce": "goodForDay",
                    "authToken": "Secret authentication token",
                    "type": "robinhood"
                  }
                },
                "Stock Market example": {
                  "value": {
                    "symbol": "AAPL",
                    "paymentSymbol": "USD",
                    "amount": 1,
                    "price": 0,
                    "isCryptocurrency": false,
                    "paymentIsCryptocurrency": false,
                    "amountIsFiat": false,
                    "extendedHours": false,
                    "orderType": "market",
                    "timeInForce": "goodTillCanceled",
                    "authToken": "Secret authentication token",
                    "type": "robinhood"
                  }
                },
                "Stock Fiat amount example ('buy TSLA for $10')": {
                  "value": {
                    "symbol": "TSLA",
                    "paymentSymbol": "USD",
                    "amount": 0,
                    "price": 0,
                    "isCryptocurrency": false,
                    "paymentIsCryptocurrency": false,
                    "amountIsFiat": true,
                    "amountInFiat": 10,
                    "extendedHours": false,
                    "orderType": "market",
                    "timeInForce": "goodTillCanceled",
                    "authToken": "Secret authentication token",
                    "type": "robinhood"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order executed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCreateOrderResultIApiResult"
                },
                "example": {
                  "content": {
                    "orderId": "6713DCDC-3D2E-46BC-ACB6-CF5FDE431CE2",
                    "brokerType": "robinhood",
                    "side": "buy",
                    "amount": 1,
                    "price": 1200,
                    "value": 1200,
                    "fee": 1.99,
                    "timestamp": 1661904014,
                    "status": "success",
                    "statusDetails": "Executed successfully",
                    "timeInForce": "goodTillCanceled"
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/cancel": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Cancel order execution",
        "description": "Cancels a pending order (an order with `InProgress` status).\r\n`SymbolPair` is required to be provided for `Binance`, `BinanceInternational`, `Okx` and `BitFlyer` institutions.\r\nThis value",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerOrderRequest"
                  }
                ]
              },
              "example": {
                "id": "17EC1243-D91A-48B6-B0CE-ECFDB134F8A0",
                "isCryptocurrency": true,
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IApiResult"
                }
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or provided integration token is not correct.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transactions/symbolinfo": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Get symbol information",
        "description": "Returns information on trading allowance for a provided symbol.\r\nFor example - some institutions allow fractional trading for some symbols, but do not allow it\r\nfor others. So before placing an order the API client can check if the required symbol can be traded fractionally\r\nwith the provided institution.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/B2BBrokerSymbolInfoForOrderRequest"
                  }
                ]
              },
              "example": {
                "side": "buy",
                "symbol": "BTC",
                "amount": 0,
                "price": 0,
                "isCryptocurrency": false,
                "paymentIsCryptocurrency": false,
                "amountIsFiat": false,
                "extendedHours": false,
                "orderType": "unknown",
                "timeInForce": "goodTillCanceled",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information for symbol obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerOrderSymbolInfoIApiResult"
                },
                "example": {
                  "content": {
                    "fractionalTradingAllowance": "fractionalTradingAllowed",
                    "minimumOrderValue": 0.001,
                    "precisionScale": 6
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/list": {
      "post": {
        "tags": ["Transfers"],
        "summary": "List transfers",
        "description": "Get cryptocurrency transfers, such as transfers on a cryptocurrency wallet, or\r\ndeposit/withdrawal transfers on an cryptocurrency exchange account.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Authentication token and integration type to obtain the list of transfers.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerTransactionsListRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfers obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerTransactionsListModelIApiResult"
                },
                "example": {
                  "content": {
                    "transfers": [
                      {
                        "id": "8E25ACB5-A9E2-4D00-8772-A255F010A2A9",
                        "status": "succeeded",
                        "type": "deposit",
                        "fromAddress": "D5PumQwt...",
                        "targetAddress": "D641Fmzx...",
                        "symbol": "DOGE",
                        "hash": "3310c6202aaeb44754a118ce11f255382d012060ade0d6d9f...",
                        "amount": 15,
                        "transactionAmount": 10,
                        "createdTimestamp": 1653215600,
                        "updatedTimestamp": 1653215600,
                        "networkTransactionFee": {
                          "amount": 5,
                          "symbol": "DOGE"
                        },
                        "confirmations": 17,
                        "blockchainMethod": "transfer"
                      },
                      {
                        "id": "70E6E3CF-5ACF-49C5-A4E1-5FB85A567F26",
                        "status": "succeeded",
                        "type": "withdrawal",
                        "fromAddress": "0x7BDE8361Fe587daD0e35448E754...",
                        "targetAddress": "0x83C8F28c26bF6aaca652Df1DbBE...",
                        "symbol": "ETH",
                        "hash": "0x77f3a280aa5cfe956a5759c24cf774325504070b32b4159...",
                        "amount": 0.1,
                        "transactionAmount": 0.099,
                        "createdTimestamp": 1653211113,
                        "updatedTimestamp": 1653211113,
                        "networkTransactionFee": {
                          "amount": 0.001,
                          "symbol": "ETH"
                        },
                        "confirmations": 18,
                        "blockchainMethod": "transfer"
                      }
                    ],
                    "total": 0
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/details": {
      "post": {
        "tags": ["Transfers"],
        "summary": "Get transfer",
        "description": "Get details of a cryptocurrency transfer.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionDetailsRequest"
                  }
                ]
              },
              "example": {
                "transactionId": "63F1A6B6-BF45-4E51-A624-EC52B5680D48",
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer details obtained.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransactionIApiResult"
                },
                "example": {
                  "content": {
                    "id": "8E25ACB5-A9E2-4D00-8772-A255F010A2A9",
                    "status": "succeeded",
                    "type": "deposit",
                    "fromAddress": "D5PumQwt...",
                    "targetAddress": "D641Fmzx...",
                    "symbol": "DOGE",
                    "hash": "3310c6202aaeb44754a118ce11f255382d012060ade0d6d9f...",
                    "amount": 15,
                    "transactionAmount": 10,
                    "createdTimestamp": 1653215600,
                    "updatedTimestamp": 1653215600,
                    "networkTransactionFee": { "amount": 5, "symbol": "DOGE" },
                    "confirmations": 17,
                    "blockchainMethod": "transfer"
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Transfer details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Transfer with provided id was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "notFound",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers": {
      "post": {
        "tags": ["Transfers"],
        "summary": "Initiate a transfer",
        "description": "Initiate a new cryptocurrency transfer on a blockchain, cryptocurrency broker or cryptocurrency exchange.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerCreateCryptocurrencyTransactionRequest"
                  }
                ]
              },
              "examples": {
                "Transfer using AddressType (DOGE over DOGE chain)": {
                  "value": {
                    "data": "Some memo",
                    "targetAddress": "D641Fmzx...",
                    "amount": 100,
                    "fee": 5,
                    "addressType": "dogeAddress",
                    "mfaCode": "000000",
                    "password": "$sb7u26",
                    "authToken": "Secret authentication token",
                    "type": "coinbase"
                  }
                },
                "Transfer using symbol and chain (USDT as ERC-20 over Ethereum chain)": {
                  "value": {
                    "data": "Some memo",
                    "targetAddress": "0x4Df61A3CcfB...",
                    "amount": 100,
                    "fee": 0,
                    "mfaCode": "000000",
                    "chain": "ETH",
                    "symbol": "USDT",
                    "authToken": "Secret authentication token",
                    "type": "coinbase"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer successfully initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCreateCryptocurrencyTransactionResponseIApiResult"
                },
                "example": {
                  "content": {
                    "failed": false,
                    "status": "pending",
                    "statusDetails": "Accepted",
                    "transaction": {
                      "id": "8E25ACB5-A9E2-4D00-8772-A255F010A2A9",
                      "status": "pending",
                      "type": "withdrawal",
                      "fromAddress": "D5PumQwt...",
                      "targetAddress": "D641Fmzx...",
                      "symbol": "DOGE",
                      "hash": "3310c6202aaeb44754a118ce11f255382d012060ade0d6d9f...",
                      "amount": 105,
                      "transactionAmount": 100,
                      "createdTimestamp": 1653215600,
                      "updatedTimestamp": 1653215600,
                      "networkTransactionFee": {
                        "amount": 5,
                        "symbol": "DOGE"
                      },
                      "confirmations": 3,
                      "blockchainMethod": "transfer"
                    }
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Transfer details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/address/get": {
      "post": {
        "tags": ["Transfers"],
        "summary": "Get deposit address",
        "description": "Get or generate a cryptocurrency deposit address that can be used to transfer assets to the financial institution",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerCryptocurrencyDepositAddressRequest"
                  }
                ]
              },
              "example": {
                "symbol": "DOGE",
                "chain": "DOGE",
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address successfully obtained or generation initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCryptocurrencyDepositAddressResponseIApiResult"
                },
                "example": {
                  "content": {
                    "symbol": "DOGE",
                    "address": "D641Fmzx...",
                    "chain": "DOGE"
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "404": {
            "description": "Address for the required symbol is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "notFound",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/transfers/symbol/details": {
      "post": {
        "tags": ["Transfers"],
        "summary": "Get details of asset",
        "description": "Get details of the asset for deposit or withdrawal. For example, several exchanges support same tokens over multiple\r\nblockchains, and thus require the name of chain to be supplied for transfers. This endpoint allows getting such details.",
        "parameters": [
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Id of the client",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client secret, should be stored safely and never shared",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BrokerCryptocurrencyDepositAddressRequest"
                  }
                ]
              },
              "example": {
                "symbol": "DOGE",
                "chain": "DOGE",
                "authToken": "Secret authentication token",
                "type": "robinhood"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address successfully obtained or generation initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BBrokerCryptocurrencyDepositAddressResponseIApiResult"
                },
                "example": {
                  "content": {
                    "symbol": "ETH",
                    "addressTypes": ["ethAddress"],
                    "chains": [{ "chain": "Ethereum", "fee": 0.00001 }]
                  },
                  "status": "ok",
                  "message": ""
                }
              }
            }
          },
          "400": {
            "description": "Request details are not correct.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "badRequest",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "404": {
            "description": "Asset details for provided symbol are not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResult"
                },
                "example": {
                  "status": "notFound",
                  "message": "Error message",
                  "displayMessage": "Optional display message"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Client Id or Client Secret are not correct or missing.",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResult": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "A message generated by the API",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "description": "User-friendly display message that can be presented to the end user",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ApiResultStatus": {
        "enum": [
          "ok",
          "serverFailure",
          "permissionDenied",
          "badRequest",
          "notFound",
          "conflict",
          "tooManyRequest"
        ],
        "type": "string"
      },
      "AssetWeight": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "format": "double"
          },
          "isCrypto": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationFieldDescription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field, as expected from the API",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationModel": {
        "type": "object",
        "properties": {
          "authResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthResponse"
              }
            ],
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationFieldDescription"
            },
            "description": "Set of fields that are expected to be provided based on the status of the AuthResponse",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationSchemeType": {
        "enum": ["usernamePassword", "oAuth", "apiKey", "blockchainAddress"],
        "type": "string"
      },
      "B2BAssetType": {
        "enum": ["equity", "cryptocurrency", "option", "nft"],
        "type": "string"
      },
      "B2BBrokerAccountBalance": {
        "type": "object",
        "properties": {
          "cash": {
            "type": "number",
            "description": "Withdrawable cash amount on the account.",
            "format": "double",
            "nullable": true
          },
          "buyingPower": {
            "type": "number",
            "description": "Buying power indicating the maximum amount the user can spend to buy assets. E.g. available margin.",
            "format": "double",
            "nullable": true
          },
          "cryptocurrencyBuyingPower": {
            "type": "number",
            "description": "Buying power available for placing cryptocurrency orders.",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO 4217 currency code.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAccountBalanceModel": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerAccountBalance"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAccountBalanceModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAccountBalanceModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthPromptResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": ["failed", "redirect", "openInBrokerModule"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAuthPromptStatus"
              }
            ]
          },
          "redirectLink": {
            "type": "string",
            "nullable": true
          },
          "linkToken": {
            "type": "string",
            "nullable": true
          },
          "oAuthToken": {
            "type": "string",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthPromptResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthPromptResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthRequest": {
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "tradePin": {
            "type": "string",
            "nullable": true
          },
          "challengeId": {
            "type": "string",
            "nullable": true
          },
          "challengeCode": {
            "type": "string",
            "nullable": true
          },
          "challengeAnswer": {
            "type": "string",
            "description": "Used to provide answers to security questions",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "authToken": {
            "type": "string",
            "nullable": true
          },
          "redirectLink": {
            "type": "string",
            "nullable": true
          },
          "cryptocurrencyWalletAuthData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencyWalletAuthRequest"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "failed",
              "challengeFailed",
              "succeeded",
              "challengeIssued",
              "mfaRequired",
              "openInBrokerModule",
              "delayed"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAuthStatus"
              }
            ],
            "description": "Status of the request"
          },
          "challengeId": {
            "type": "string",
            "description": "Id of the challenge, relevant when the status is `ChallengeIssued`",
            "nullable": true
          },
          "challengeText": {
            "type": "string",
            "nullable": true
          },
          "challengeExpiresInSeconds": {
            "type": "integer",
            "description": "Life span of the challenge",
            "format": "int32",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "expiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "refreshTokenExpiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAccount"
              }
            ],
            "nullable": true
          },
          "brokerBrandInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerBrandInfo"
              }
            ],
            "nullable": true
          },
          "accountTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerAccountTokens"
            },
            "nullable": true
          },
          "requiresReauthentication": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerAuthStatus": {
        "enum": ["failed", "succeeded"],
        "type": "string"
      },
      "B2BBrokerCreateCryptocurrencyTransactionResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Transaction Id by the financial institution",
            "nullable": true
          },
          "failed": {
            "type": "boolean"
          },
          "status": {
            "enum": [
              "unknown",
              "failed",
              "frozen",
              "succeeded",
              "mfaRequired",
              "pending",
              "expired",
              "canceled",
              "waitingForSignature",
              "waitingForClearing",
              "awaitingApproval",
              "awaitingConfirmation",
              "awaitingVerification",
              "rejected",
              "pendingCancel"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
              }
            ],
            "description": "Status of the operation"
          },
          "statusDetails": {
            "type": "string",
            "description": "Details of the current status of the transfer, as provided by the financial institution",
            "nullable": true
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransaction"
              }
            ],
            "description": "Details of the created transaction",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateCryptocurrencyTransactionResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCreateCryptocurrencyTransactionResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateOrderRequest": {
        "required": [
          "amount",
          "amountIsFiat",
          "authToken",
          "isCryptocurrency",
          "orderType",
          "paymentIsCryptocurrency",
          "paymentSymbol",
          "symbol",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to trade. For example, `AAPL` or `ETH`"
          },
          "paymentSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to use for payment, defaults to `USD`."
          },
          "amount": {
            "type": "number",
            "description": "Amount of purchase.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Price of the unit, used for `Limit` and `StopLoss` orders.",
            "format": "double"
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so the type of the asset needs to be specified explicitly."
          },
          "paymentIsCryptocurrency": {
            "type": "boolean",
            "description": "Indicates whether the `PaymentSymbol` is fiat or cryptocurrency"
          },
          "amountIsFiat": {
            "type": "boolean",
            "description": "This value indicates if the order should be executed in fiat amount (e.g. purchase ETH for $10). This can be\r\nperformed only if the current institution supports such orders (`SupportsPlacingSellOrdersInFiatAmount` and\r\n`SupportsPlacingBuyOrdersInFiatAmount` fields in `get supported order features for institution`) and `AmountInFiat`\r\nvalue is passed."
          },
          "amountInFiat": {
            "type": "number",
            "description": "Specifies the target amount in fiat currency. For example setting this to `10` when the `AmountIsFiat` = `true`\r\nand `PaymentSymbol` = `USD` will instruct the API to place an order to buy/sell the asset worth $10.",
            "format": "double",
            "nullable": true
          },
          "extendedHours": {
            "type": "boolean",
            "description": "Specifies if the extended trading hours should be used."
          },
          "orderType": {
            "enum": [
              "unknown",
              "market",
              "limit",
              "stopLoss",
              "stopLimit",
              "takeProfit",
              "netDebit",
              "netCredit",
              "exercise"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceType"
              }
            ]
          },
          "timeInForce": {
            "enum": [
              "goodTillCanceled",
              "immediateOrCancel",
              "fillOrKill",
              "goodForDay",
              "postOnly",
              "unknown"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateOrderResult": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Id of the order, as returned from the financial institution. Can be used to get the status of the order.",
            "nullable": true
          },
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution."
          },
          "side": {
            "enum": ["unknown", "buy", "sell"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "description": "Side of the order."
          },
          "amount": {
            "type": "number",
            "description": "Amount of the order.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Unit price of the asset.",
            "format": "double",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Total value of the order.",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "description": "Optional Fee taken by the financial institution.",
            "format": "double",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "description": "Timestamp of the order.",
            "format": "int64"
          },
          "status": {
            "enum": [
              "unknown",
              "inProgress",
              "cancelled",
              "rejected",
              "failed",
              "success",
              "partiallyFilled",
              "expired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderStatus"
              }
            ],
            "description": "Status of the order."
          },
          "statusDetails": {
            "type": "string",
            "description": "Text details of the order, if additionally returned from the financial institution.",
            "nullable": true
          },
          "timeInForce": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ],
            "description": "Value that indicates how long the order will remain active before it is executed or expires.",
            "nullable": true
          },
          "symbolPair": {
            "type": "string",
            "description": "Optional pair of symbols, as returned from the financial institution. Can be required to obtain the status of the order by some institutions.",
            "nullable": true
          },
          "parentOrderId": {
            "type": "string",
            "description": "Id of the parent order, applicable to some institutions if the order was executed in several trades.",
            "nullable": true
          },
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerOrderTrade"
            },
            "description": "List of trades, provided only if the order was executed in several trades.",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "description": "A message describing the error if the order wasn't placed.",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "description": "A user-friendly display message that can be presented to the end user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCreateOrderResultIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCreateOrderResult"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyDepositAddressResponse": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true
          },
          "minimumDepositAmount": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyDepositAddressResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencyDepositAddressResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the transfer, if provided by the financial institution",
            "nullable": true
          },
          "status": {
            "enum": [
              "unknown",
              "failed",
              "frozen",
              "succeeded",
              "mfaRequired",
              "pending",
              "expired",
              "canceled",
              "waitingForSignature",
              "waitingForClearing",
              "awaitingApproval",
              "awaitingConfirmation",
              "awaitingVerification",
              "rejected",
              "pendingCancel"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
              }
            ],
            "description": "Current status of the transaction"
          },
          "statusDetails": {
            "type": "string",
            "description": "Details of the current status of the transfer, as provided by the financial institution",
            "nullable": true
          },
          "type": {
            "enum": ["unknown", "deposit", "withdrawal"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionType"
              }
            ],
            "description": "The direction of the transaction"
          },
          "fromAddress": {
            "type": "string",
            "description": "Address where the transaction was sent from",
            "nullable": true
          },
          "targetAddress": {
            "type": "string",
            "description": "Address where the transaction was sent to",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Ticker of the transaction",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Crypto Chain the transaction belongs to",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Memo of the transaction (also called \"Tag\")",
            "nullable": true
          },
          "hash": {
            "type": "string",
            "description": "Hash of the transaction",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Full amount affected the balance, typically transaction amount plus fee",
            "format": "double"
          },
          "transactionAmount": {
            "type": "number",
            "description": "Transaction amount",
            "format": "double",
            "nullable": true
          },
          "createdTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the transaction was created",
            "format": "int64"
          },
          "updatedTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the transaction was last updated",
            "format": "int64"
          },
          "networkTransactionFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionFee"
              }
            ],
            "description": "Fee taken by the network",
            "nullable": true
          },
          "transferFee": {
            "type": "number",
            "description": "Fee taken by the financial institution",
            "format": "double",
            "nullable": true
          },
          "confirmations": {
            "type": "integer",
            "description": "Number of confirmations on the blockchain",
            "format": "int64",
            "nullable": true
          },
          "blockchainMethodName": {
            "type": "string",
            "description": "Name of the executed blockchain function based on decoded input data",
            "nullable": true
          },
          "blockchainMethod": {
            "enum": [
              "transfer",
              "swap",
              "mint",
              "withdraw",
              "claimRewards",
              "deposit",
              "approve",
              "forgeToken",
              "multicall",
              "migrateToken",
              "claim",
              "openSeaTransfer",
              "cancel",
              "commit",
              "run",
              "repay",
              "execute",
              "stake",
              "merge"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionBlockchainMethod"
              }
            ],
            "description": "Executed blockchain function based on decoded input data. Not guaranteed to be identified"
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyTransactionIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransaction"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerCryptocurrencyWalletAuthRequest": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol to connect",
            "nullable": true
          },
          "cryptocurrencyAddressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Blockchain to connect to",
            "nullable": true
          },
          "cryptocurrencyWalletType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyWalletType"
              }
            ],
            "description": "Optional wallet type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOptionData": {
        "type": "object",
        "properties": {
          "optionType": {
            "enum": ["unknown", "call", "put"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionType"
              }
            ],
            "description": "Type of option"
          },
          "direction": {
            "enum": [
              "unknown",
              "buyToOpen",
              "buyToClose",
              "sellToOpen",
              "sellToClose",
              "buyToCover",
              "sellShort"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionDirection"
              }
            ],
            "description": "Direction of option"
          },
          "strikePrice": {
            "type": "number",
            "description": "Option strike price",
            "format": "double"
          },
          "expirationTimestamp": {
            "type": "integer",
            "description": "Option expiration timestamp",
            "format": "int64"
          },
          "numberOfSharesInContract": {
            "type": "number",
            "description": "Number of shares covered by option",
            "format": "double"
          },
          "complexOrderStrategyType": {
            "type": "string",
            "description": "Option complex order strategy type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Transaction id, as provided by the institution",
            "nullable": true
          },
          "side": {
            "enum": ["unknown", "buy", "sell"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "description": "Side of the transaction"
          },
          "symbol": {
            "type": "string",
            "description": "Traded symbol",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the traded asset",
            "nullable": true
          },
          "assetType": {
            "enum": ["equity", "cryptocurrency", "option", "nft"],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BAssetType"
              }
            ],
            "description": "Type of the traded asset"
          },
          "paymentSymbol": {
            "type": "string",
            "description": "Fiat or cryptocurrency symbol used for payment. For transactions with types `ConversionFrom` or `ConversionTo`\r\nthis field specifies the target symbol. For example, for `ETH` to `BTC` conversion, the transaction type is `ConversionTo`, the `Symbol` field is `ETH` and the `PaymentSymbol` is `BTC`",
            "nullable": true
          },
          "paymentType": {
            "enum": ["fiat", "cryptocurrency"],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrderPaymentSymbolType"
              }
            ],
            "description": "Indicates if the payment was performed with fiat or crypto currency"
          },
          "amount": {
            "type": "number",
            "description": "Executed amount",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price of the unit",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "description": "Order Fee, taken by the financial institution",
            "format": "double",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "Total value",
            "format": "double",
            "nullable": true
          },
          "createdTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the order was placed or the transaction was created",
            "format": "int64"
          },
          "updatedTimestamp": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the transaction was last updated (e.g. executed)",
            "format": "int64"
          },
          "status": {
            "enum": [
              "unknown",
              "inProgress",
              "cancelled",
              "rejected",
              "failed",
              "success",
              "partiallyFilled",
              "expired"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderStatus"
              }
            ],
            "description": "Status of the transaction"
          },
          "statusDetails": {
            "type": "string",
            "description": "Status text, as provided by the institution",
            "nullable": true
          },
          "orderType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceType"
              }
            ],
            "description": "Type of the placed order",
            "nullable": true
          },
          "timeInForce": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ],
            "description": "Time in force of the order: a value indicating how long the order remains active before it is executed or expires",
            "nullable": true
          },
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the integration"
          },
          "transactionType": {
            "enum": [
              "order",
              "conversionTo",
              "conversionFrom",
              "ownAccountDeposit",
              "ownAccountWithdraw",
              "stake",
              "dividendReinvestment",
              "interest",
              "reward",
              "unknown",
              "conversionToFiat",
              "conversionFromFiat"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BTransactionType"
              }
            ],
            "description": "Type of the transaction"
          },
          "parentOrderId": {
            "type": "string",
            "description": "Id of the parent order, applicable to some institutions",
            "nullable": true
          },
          "optionDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOptionData"
              }
            ],
            "description": "Additional details for options",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrder"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderListRequest": {
        "required": ["authToken", "type"],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.\r\nProviding it will cause the response to only return changes after this update.\r\nIf this field is not provided, the history of transactions will be returned starting with the first-added transaction.",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "Number of records to include in the response. <br />\r\nDefault: `100` <br />\r\nMaximum: `250`",
            "format": "int32"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerOrderStatus"
            },
            "description": "Return orders of this statuses only. If this field is not provided, orders with all available statuses will be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderListResponse": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerOrder"
            },
            "description": "List of obtained transactions.",
            "nullable": true
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "description": "Total amount of records.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderListResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrderListResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderPaymentSymbolType": {
        "enum": ["fiat", "cryptocurrency"],
        "type": "string"
      },
      "B2BBrokerOrderRequest": {
        "required": ["authToken", "id", "isCryptocurrency", "type"],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "side": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "description": "Should be provided for Coinbase.",
            "nullable": true
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so we need to explicitly specify what type of asset is requested to be bought."
          },
          "symbolPair": {
            "type": "string",
            "description": "Symbol pair of the order (requested by some brokers).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderSymbolInfo": {
        "type": "object",
        "properties": {
          "fractionalTradingAllowance": {
            "enum": [
              "fractionalTradingAllowed",
              "fractionalTradingNotAllowed",
              "tradingNotAllowed",
              "fractionalTradingPossiblyAllowed"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/SymbolTradingAllowance"
              }
            ],
            "description": "Specifies if the fractional trading is allowed for the provided symbol"
          },
          "minimumOrderValue": {
            "type": "number",
            "description": "Minimum allowed order value",
            "format": "double"
          },
          "precisionScale": {
            "type": "integer",
            "description": "Maximum number of decimal digits accepted by the symbol",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderSymbolInfoIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerOrderSymbolInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerOrderTrade": {
        "type": "object",
        "properties": {
          "tradeId": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "orderCategory": {
            "enum": ["order", "trade", "ledger", "historyAction"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderCategory"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPortfolioModel": {
        "type": "object",
        "properties": {
          "status": {
            "enum": ["succeeded", "failed", "notAuthorized"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerRequestStatus"
              }
            ],
            "description": "Status of the request to the institution's API"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message specifying the problem",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "description": "User-friendly error message, optimized to be shown to the end user",
            "nullable": true
          },
          "equityPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "Equity holdings, such as stocks and ETFs",
            "nullable": true
          },
          "notSupportedEquityPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "The equity positions Front could not recognize",
            "nullable": true
          },
          "notSupportedCryptocurrencyPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "The cryptocurrency positions Front could not recognize",
            "nullable": true
          },
          "cryptocurrencyPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPosition"
            },
            "description": "Cryptocurrency holdings on the account",
            "nullable": true
          },
          "nftPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BNftPosition"
            },
            "description": "NFT holdings on the account",
            "nullable": true
          },
          "optionPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BOptionPosition"
            },
            "description": "Option holdings on the account",
            "nullable": true
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution"
          },
          "accountId": {
            "type": "string",
            "description": "External institution's account id (returned by the institution)",
            "nullable": true
          },
          "institutionName": {
            "type": "string",
            "description": "Friendly name of the connected institution",
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "description": "Name of the account as returned from the institution",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPortfolioModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerPortfolioModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPreviewOrderResult": {
        "type": "object",
        "properties": {
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "fee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "feeText": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "side": {
            "enum": ["unknown", "buy", "sell"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ]
          },
          "status": {
            "enum": ["success", "failed"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderValidationStatus"
              }
            ]
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "paymentSymbol": {
            "type": "string",
            "nullable": true
          },
          "paymentIsCryptocurrency": {
            "type": "boolean"
          },
          "estimatedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerPreviewOrderResultIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerPreviewOrderResult"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerRefreshTokenResponse": {
        "type": "object",
        "properties": {
          "status": {
            "enum": ["failed", "succeeded"],
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerAuthStatus"
              }
            ]
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "expiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "refreshTokenExpiresInSeconds": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "brokerAccountTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerAccountTokens"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerRefreshTokenResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerRefreshTokenResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerSymbolInfoForOrderRequest": {
        "required": [
          "amount",
          "amountIsFiat",
          "authToken",
          "isCryptocurrency",
          "orderType",
          "paymentIsCryptocurrency",
          "paymentSymbol",
          "symbol",
          "timeInForce",
          "type"
        ],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "symbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to trade. For example, `AAPL` or `ETH`"
          },
          "paymentSymbol": {
            "minLength": 1,
            "type": "string",
            "description": "Symbol to use for payment, defaults to `USD`."
          },
          "amount": {
            "type": "number",
            "description": "Amount of purchase.",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "Price of the unit, used for `Limit` and `StopLoss` orders.",
            "format": "double"
          },
          "isCryptocurrency": {
            "type": "boolean",
            "description": "Some Stock and Crypto symbols can intersect, so the type of the asset needs to be specified explicitly."
          },
          "paymentIsCryptocurrency": {
            "type": "boolean",
            "description": "Indicates whether the `PaymentSymbol` is fiat or cryptocurrency"
          },
          "amountIsFiat": {
            "type": "boolean",
            "description": "This value indicates if the order should be executed in fiat amount (e.g. purchase ETH for $10). This can be\r\nperformed only if the current institution supports such orders (`SupportsPlacingSellOrdersInFiatAmount` and\r\n`SupportsPlacingBuyOrdersInFiatAmount` fields in `get supported order features for institution`) and `AmountInFiat`\r\nvalue is passed."
          },
          "amountInFiat": {
            "type": "number",
            "description": "Specifies the target amount in fiat currency. For example setting this to `10` when the `AmountIsFiat` = `true`\r\nand `PaymentSymbol` = `USD` will instruct the API to place an order to buy/sell the asset worth $10.",
            "format": "double",
            "nullable": true
          },
          "extendedHours": {
            "type": "boolean",
            "description": "Specifies if the extended trading hours should be used."
          },
          "orderType": {
            "enum": [
              "unknown",
              "market",
              "limit",
              "stopLoss",
              "stopLimit",
              "takeProfit",
              "netDebit",
              "netCredit",
              "exercise"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderPlaceType"
              }
            ]
          },
          "timeInForce": {
            "enum": [
              "goodTillCanceled",
              "immediateOrCancel",
              "fillOrKill",
              "goodForDay",
              "postOnly",
              "unknown"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
              }
            ]
          },
          "side": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOrderType"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeature": {
        "type": "object",
        "properties": {
          "supported": {
            "type": "boolean"
          },
          "supportsFiatCurrencyPayment": {
            "type": "boolean"
          },
          "supportsCryptocurrencyPayment": {
            "type": "boolean"
          },
          "supportsMarginOrders": {
            "type": "boolean"
          },
          "supportedCryptocurrencySymbols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "supportedCryptocurrencySymbolsForPayment": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "supportedFiatCurrencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "marketType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureOrderType"
              }
            ],
            "nullable": true
          },
          "limitType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureOrderType"
              }
            ],
            "nullable": true
          },
          "stopLossType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureOrderType"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeatureInfo": {
        "type": "object",
        "properties": {
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the integration."
          },
          "accountId": {
            "type": "string",
            "description": "Account Id of the integration.",
            "nullable": true
          },
          "cryptocurrencyOrders": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeature"
              }
            ],
            "description": "Model, describing the ability to place cryptocurrency orders.",
            "nullable": true
          },
          "stockOrders": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeature"
              }
            ],
            "description": "Model, describing the ability to place equity orders.",
            "nullable": true
          },
          "status": {
            "enum": ["succeeded", "failed", "notAuthorized"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerRequestStatus"
              }
            ],
            "description": "Status of the request."
          },
          "supportsOrderPreview": {
            "type": "boolean",
            "description": "Indicates if the preview of orders (`preview order execution` endpoint) is provided by the institution.\r\nThis allows to validate the order using the API of the institution. If the order preview is not supported,\r\nFront API validates the order without calling the institution's API."
          },
          "supportsOrderCancellation": {
            "type": "boolean",
            "description": "Indicates if it is possible to cancel the placed order, while it's in the `InProgress` status."
          },
          "isIntegrationUp": {
            "type": "boolean",
            "description": "Indicates if the integration is available."
          },
          "isTradingSupported": {
            "type": "boolean",
            "description": "Indicates if trading is generally supported at this time."
          },
          "fiatBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerAccountBalance"
            },
            "description": "List of fiat balances of the account.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeatureInfoIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTradingFeatureInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTradingFeatureOrderType": {
        "type": "object",
        "properties": {
          "supported": {
            "type": "boolean"
          },
          "supportsFractionalShares": {
            "type": "boolean"
          },
          "supportsExtendedMarketHours": {
            "type": "boolean"
          },
          "supportsPlacingBuyOrdersInFiatAmount": {
            "type": "boolean"
          },
          "supportsPlacingSellOrdersInFiatAmount": {
            "type": "boolean"
          },
          "supportedTimeInForceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerOrderTimeInForceType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTransactionsListModel": {
        "type": "object",
        "properties": {
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokerCryptocurrencyTransaction"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "cursor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokerTransactionsListModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BBrokerTransactionsListModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokersHealthStatus": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the integration"
          },
          "isUp": {
            "type": "boolean",
            "description": "Is the communication with the integration up"
          },
          "description": {
            "type": "string",
            "description": "Description of the outage",
            "nullable": true
          },
          "downTimeStart": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating when the outage occurred",
            "format": "int64",
            "nullable": true
          },
          "downTimeEnd": {
            "type": "integer",
            "description": "Unix timestamp in seconds indicating expected end of the outage",
            "format": "int64",
            "nullable": true
          },
          "supportedProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerFeature"
            },
            "description": "Get products supported by the financial institution",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BBrokersHealthStatusListIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BBrokersHealthStatus"
            },
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BCryptocurrencyFisco": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "frontScore": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BCryptocurrencyFiscoData"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BCryptocurrencyFiscoData": {
        "type": "object",
        "properties": {
          "frontScore": {
            "type": "integer",
            "format": "int32"
          },
          "totalScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "readOnly": true
          },
          "isCompatibilityScoreApplied": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "B2BCryptocurrencyFiscoIReadOnlyCollectionIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BCryptocurrencyFisco"
            },
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BNftPosition": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "contractAddress": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string",
            "nullable": true
          },
          "marketplacePermalink": {
            "type": "string",
            "nullable": true
          },
          "addressType": {
            "enum": [
              "ethAddress",
              "btcAddress",
              "ltcAddress",
              "solAddress",
              "algoAddress",
              "celoAddress",
              "cardanoAddress",
              "polygonAddress",
              "bnbAddress",
              "elrondAddress",
              "neoAddress",
              "xrpAddress",
              "flowAddress",
              "harmonyOneAddress",
              "tronAddress",
              "dogeAddress"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "B2BOptimizedPortfolio": {
        "type": "object",
        "properties": {
          "annualizedStandardDeviation": {
            "type": "number",
            "format": "double"
          },
          "performance": {
            "type": "number",
            "format": "double"
          },
          "assetWeights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetWeight"
            },
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "chartItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BOptionPosition": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the underlying stock",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of options",
            "format": "double"
          },
          "averageOpenPrice": {
            "type": "number",
            "description": "Total average paid price",
            "format": "double"
          },
          "direction": {
            "enum": [
              "unknown",
              "buyToOpen",
              "buyToClose",
              "sellToOpen",
              "sellToClose",
              "buyToCover",
              "sellShort"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionDirection"
              }
            ],
            "description": "Side of the option, buy or sell"
          },
          "createdTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "updatedTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfSharesInContract": {
            "type": "number",
            "description": "Number of shares of the underlying stock",
            "format": "double"
          },
          "optionType": {
            "enum": ["unknown", "call", "put"],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerOptionType"
              }
            ],
            "description": "Type of the option, put or call"
          },
          "expirationDate": {
            "type": "string",
            "description": "The last day that the option contract is valid",
            "nullable": true
          },
          "strikePrice": {
            "type": "number",
            "description": "The price at which a put or call option can be exercised",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "B2BOriginalPortfolio": {
        "type": "object",
        "properties": {
          "annualizedStandardDeviation": {
            "type": "number",
            "format": "double"
          },
          "performance": {
            "type": "number",
            "format": "double"
          },
          "assetWeights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetWeight"
            },
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "chartItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartItem"
            },
            "nullable": true
          },
          "startingValue": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioFisco": {
        "type": "object",
        "properties": {
          "frontScore": {
            "type": "integer",
            "format": "int32"
          },
          "totalScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "readOnly": true
          },
          "maxFrontScore": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minFrontScore": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "financialScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Front analyzes available financial data to reach a determination on risk associated with an asset based on its underlying financial conditions.\r\nThe Financials Score is a strong metric for investors who seek stocks that are underperforming and ripe for growth."
          },
          "performanceScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Front's proprietary algorithm performs advanced statistical analysis.\r\nWe use tools popular among hedge funds to assess historical performance based on different categories and volatility of assets over a short period of time."
          },
          "newsScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Front Market Monitor autonomously crawls tens of thousands of websites\r\nat a time and assigns each stock a score based on the news stories"
          },
          "predictionScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ]
          },
          "residualReturnScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ]
          },
          "diversificationScore": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Portfolio diversification score",
            "nullable": true
          },
          "esgScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Environmental, Social, Governance\r\nParameters are a set of standards used to evaluate investments.\r\nEnvironmental criteria consider how a company performs as a proponent of nature.\r\nSocial criteria examine how it manages relationships with employees, suppliers, customers,\r\nand the communities where it operates. Governance deals with a company’s leadership, audits, and shareholder rights."
          },
          "isEsgScoreApplied": {
            "type": "boolean"
          },
          "isFinancialScoreApplied": {
            "type": "boolean"
          },
          "isPerformanceScoreApplied": {
            "type": "boolean"
          },
          "isNewsScoreApplied": {
            "type": "boolean"
          },
          "isPredictionScoreApplied": {
            "type": "boolean"
          },
          "isResidualReturnScoreApplied": {
            "type": "boolean"
          },
          "isDiversificationScoreApplied": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioFiscoIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BPortfolioFisco"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioModel": {
        "type": "object",
        "properties": {
          "portfolioCostBasis": {
            "type": "number",
            "description": "Amount of money spent to buy all positions of the portfolio.",
            "format": "double",
            "nullable": true
          },
          "actualPortfolioPerformance": {
            "type": "number",
            "description": "Actual performance based on the cost basis.",
            "format": "double",
            "nullable": true
          },
          "equitiesValue": {
            "type": "number",
            "description": "Total USD portfolio value of all equities (sum(equity price * equity amount)). Does not include cash balance.",
            "format": "double"
          },
          "cryptocurrenciesValue": {
            "type": "number",
            "description": "Total USD value of all cryptocurrencies in the portfolio.",
            "format": "double"
          },
          "nftsValue": {
            "type": "number",
            "description": "Total USD value of all NFTs in the portfolio.",
            "format": "double"
          },
          "equityPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPositionWithMarketValues"
            },
            "description": "List of equity positions",
            "nullable": true
          },
          "cryptocurrencyPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BPositionWithMarketValues"
            },
            "description": "List of cryptocurrency positions",
            "nullable": true
          },
          "nftPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NftPositionWithMarketValues"
            },
            "description": "List of NFT positions",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BPortfolioModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioOptimizationModel": {
        "type": "object",
        "properties": {
          "originalPortfolio": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BOriginalPortfolio"
              }
            ],
            "nullable": true
          },
          "optimizedPortfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BOptimizedPortfolio"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BPortfolioOptimizationModelIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BPortfolioOptimizationModel"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BPosition": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the asset",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of the asset",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "description": "The total original value (or purchase price) of the asset",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BPositionWithMarketValues": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Symbol of the asset",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Amount of the asset",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "description": "The total original value (or purchase price) of the asset",
            "format": "double",
            "nullable": true
          },
          "marketValue": {
            "type": "number",
            "description": "Market value of the asset: amount of asset multiplied by last asset value.",
            "format": "double",
            "nullable": true
          },
          "portfolioPercentage": {
            "type": "number",
            "description": "What percentage of total portfolio value is taken by this asset.",
            "format": "double",
            "nullable": true
          },
          "totalReturn": {
            "type": "number",
            "description": "Total return of investment of this asset. Can be negative or null. Based on the cost basis of the asset, cost basis\r\nis not available by some of integrations.",
            "format": "double",
            "nullable": true
          },
          "returnPercentage": {
            "type": "number",
            "description": "Percent of return of investment for this asset. Can be negative or null.",
            "format": "double",
            "nullable": true
          },
          "lastPrice": {
            "type": "number",
            "description": "Current last price of the asset.",
            "format": "double",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "description": "Company name of the relative asset/",
            "nullable": true
          },
          "totalDailyReturn": {
            "type": "number",
            "description": "Total daily return of investment for this asset. Can be negative.",
            "format": "double",
            "nullable": true
          },
          "dailyReturnPercentage": {
            "type": "number",
            "description": "Daily percent of return of investment for this asset. Can be negative.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BStockFisco": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "frontScore": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BStockFiscoData"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BStockFiscoData": {
        "type": "object",
        "properties": {
          "frontScore": {
            "type": "integer",
            "format": "int32"
          },
          "totalScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "readOnly": true
          },
          "maxFrontScore": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minFrontScore": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "financialScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Front analyzes available financial data to reach a determination on risk associated with an asset based on its underlying financial conditions.\r\nThe Financials Score is a strong metric for investors who seek stocks that are underperforming and ripe for growth."
          },
          "performanceScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Front's proprietary algorithm performs advanced statistical analysis.\r\nWe use tools popular among hedge funds to assess historical performance based on different categories and volatility of assets over a short period of time."
          },
          "newsScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Front Market Monitor autonomously crawls tens of thousands of websites\r\nat a time and assigns each stock a score based on the news stories"
          },
          "predictionScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ]
          },
          "residualReturnScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ]
          },
          "diversificationScore": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Portfolio diversification score",
            "nullable": true
          },
          "esgScore": {
            "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
            "allOf": [
              {
                "$ref": "#/components/schemas/FiscoIngredientScoreEnum"
              }
            ],
            "description": "Environmental, Social, Governance\r\nParameters are a set of standards used to evaluate investments.\r\nEnvironmental criteria consider how a company performs as a proponent of nature.\r\nSocial criteria examine how it manages relationships with employees, suppliers, customers,\r\nand the communities where it operates. Governance deals with a company’s leadership, audits, and shareholder rights."
          },
          "isCompatibilityScoreApplied": {
            "type": "boolean"
          },
          "isEsgScoreApplied": {
            "type": "boolean"
          },
          "isFinancialScoreApplied": {
            "type": "boolean"
          },
          "isPerformanceScoreApplied": {
            "type": "boolean"
          },
          "isNewsScoreApplied": {
            "type": "boolean"
          },
          "isPredictionScoreApplied": {
            "type": "boolean"
          },
          "isResidualReturnScoreApplied": {
            "type": "boolean"
          },
          "isDiversificationScoreApplied": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BStockFiscoIReadOnlyCollectionIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BStockFisco"
            },
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BSymbolNewsData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier of the news item.",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "The title of the news.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The news content.",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "The url of the image related to th news.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The name of the news source.",
            "nullable": true
          },
          "sourceUrl": {
            "type": "string",
            "description": "The url of the news source.",
            "nullable": true
          },
          "createdTimestamp": {
            "type": "integer",
            "description": "The time of the creation of the news.",
            "format": "int64"
          },
          "url": {
            "type": "string",
            "description": "The url where the news is available.",
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "description": "Integer value which describes the relevance of the news in the Front system.",
            "format": "int32"
          },
          "symbols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of stock symbols mentioned in the news.",
            "nullable": true
          },
          "cryptocurrencySymbols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of cryptocurrencies mentioned in the news.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "B2BSymbolNewsOrder": {
        "enum": ["rank", "timestamp"],
        "type": "string"
      },
      "B2BSymbolNewsResponse": {
        "type": "object",
        "properties": {
          "news": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/B2BSymbolNewsData"
            },
            "description": "The collection of news.",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "description": "The total count of news related to the symbol",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "B2BSymbolNewsResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/B2BSymbolNewsResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "B2BSymbolNewsSortingDirection": {
        "enum": ["ascending", "descending"],
        "type": "string"
      },
      "B2BTransactionType": {
        "enum": [
          "order",
          "conversionTo",
          "conversionFrom",
          "ownAccountDeposit",
          "ownAccountWithdraw",
          "stake",
          "dividendReinvestment",
          "interest",
          "reward",
          "unknown",
          "conversionToFiat",
          "conversionFromFiat"
        ],
        "type": "string"
      },
      "BrokerAccount": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "fund": {
            "type": "number",
            "description": "Buying power of the account. Typically consists of cash plus available margin.\r\nFor non-margin accounts fund contains cash only",
            "format": "double",
            "nullable": true
          },
          "cash": {
            "type": "number",
            "description": "Cash balance in USD",
            "format": "double",
            "nullable": true
          },
          "isReconnected": {
            "type": "boolean",
            "description": "Indicates if this account was already connected by the current user and device.\r\nCan be null.",
            "nullable": true
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerFiatBalance"
            },
            "description": "The list of all asset balances of account",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerAccountTokens": {
        "type": "object",
        "properties": {
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerAccount"
              }
            ],
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerAuthPromptStatus": {
        "enum": ["failed", "redirect", "openInBrokerModule"],
        "type": "string"
      },
      "BrokerAuthStatus": {
        "enum": [
          "failed",
          "challengeFailed",
          "succeeded",
          "challengeIssued",
          "mfaRequired",
          "openInBrokerModule",
          "delayed"
        ],
        "type": "string"
      },
      "BrokerAuthenticationScheme": {
        "type": "object",
        "properties": {
          "brokerType": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "authenticationSchemeType": {
            "enum": [
              "usernamePassword",
              "oAuth",
              "apiKey",
              "blockchainAddress"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationSchemeType"
              }
            ],
            "description": "Type of authentication for the integration."
          },
          "initialAuthenticationModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthenticationModel"
              }
            ],
            "description": "Set of fields that should be provided in the initial POST `authenticate` request.",
            "nullable": true
          },
          "authenticationSteps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticationModel"
            },
            "description": "Set of fields that should be provided depending on the status of the response of the first POST `authenticate` request.",
            "nullable": true
          },
          "mfaSchemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MfaScheme"
            },
            "description": "Supported MFA schemes, can be none or multiple.",
            "nullable": true
          },
          "instructionsUrl": {
            "type": "string",
            "description": "Optional URL with the instructions explaining how to create a set of API key/secret for the integration, can be shown to the end user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerAuthenticationSchemeIReadOnlyCollectionIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerAuthenticationScheme"
            },
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BrokerBaseRequest": {
        "required": ["authToken", "type"],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          }
        },
        "additionalProperties": false
      },
      "BrokerBrandInfo": {
        "type": "object",
        "properties": {
          "brokerLogo": {
            "type": "string",
            "nullable": true
          },
          "brokerPrimaryColor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCreateCryptocurrencyTransactionRequest": {
        "required": ["authToken", "targetAddress", "type"],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "data": {
            "type": "string",
            "description": "Additional data to send on-chain (optional, depends on an integration)",
            "nullable": true
          },
          "targetAddress": {
            "minLength": 1,
            "type": "string",
            "description": "Target address to transfer the asset to"
          },
          "amount": {
            "type": "number",
            "description": "Amount to transfer",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "description": "On-chain fee (optional, depends on an integration)",
            "format": "double"
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of symbol to be transferred. Providing `EthAddress` will initiate a transfer of ETH over Ethereum blockchain.\r\nCan be used instead of `Symbol` and `Chain` fields.\r\nTo transfer assets over non-default chains (e.g. sending USDT over ERC20) please `Symbol` and `Chain` fields.",
            "nullable": true
          },
          "mfaCode": {
            "type": "string",
            "description": "2 Factor auth code (optional, depends on an integration)",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Password or pass-phrase, required to send transfers (optional, depends on an integration)",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Custom chain name, required by some of the integrations. E.g. USDT can be sent over USDT-ERC20, USDT-TRC20, and USDT-Omni.\r\nCan be used to transfer assets over non-default chains (e.g. sending USDT over ERC20).\r\nPlease use `symbol/details` endpoint to get the list of all possible chains.",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "description": "Memo (also called \"Tag\") - address remark.",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol to be transferred. Can be provided instead of the `AddressType` field.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyDepositAddressRequest": {
        "required": ["authToken", "type"],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the required cryptocurrency, e.g. ETH or BTC.\r\nCan be used instead of the `AddressType` field.",
            "nullable": true
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of symbol to be transferred. Providing `EthAddress` will assume a transfer of ETH over Ethereum blockchain.\r\nCan be used instead of `Symbol` field.",
            "nullable": true
          },
          "chain": {
            "type": "string",
            "description": "Chain of the required cryptocurrency, e.g. USDT has USDT-ERC20, USDT-TRC20, and USDT-Omni",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyTransactionBlockchainMethod": {
        "enum": [
          "transfer",
          "swap",
          "mint",
          "withdraw",
          "claimRewards",
          "deposit",
          "approve",
          "forgeToken",
          "multicall",
          "migrateToken",
          "claim",
          "openSeaTransfer",
          "cancel",
          "commit",
          "run",
          "repay",
          "execute",
          "stake",
          "merge"
        ],
        "type": "string"
      },
      "BrokerCryptocurrencyTransactionDetailsRequest": {
        "required": ["authToken", "type"],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "addressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "Type of the address of the transferred asset. Can be used instead of the `Symbol` field.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction Id by the financial institution",
            "nullable": true
          },
          "transactionHash": {
            "type": "string",
            "description": "Hash of the transaction on the blockchain",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the transferred asset. Can be provided instead of the `AddressType` field.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyTransactionFee": {
        "type": "object",
        "properties": {
          "gasPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "gasUsed": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyTransactionStatus": {
        "enum": [
          "unknown",
          "failed",
          "frozen",
          "succeeded",
          "mfaRequired",
          "pending",
          "expired",
          "canceled",
          "waitingForSignature",
          "waitingForClearing",
          "awaitingApproval",
          "awaitingConfirmation",
          "awaitingVerification",
          "rejected",
          "pendingCancel"
        ],
        "type": "string"
      },
      "BrokerCryptocurrencyTransactionType": {
        "enum": ["unknown", "deposit", "withdrawal"],
        "type": "string"
      },
      "BrokerCryptocurrencyWalletListResponse": {
        "type": "object",
        "properties": {
          "supportedCryptocurrencyWallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptocurrencyWalletDescription"
            },
            "nullable": true
          },
          "supportedCryptocurrencyAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptocurrencyWalletDescription"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerCryptocurrencyWalletListResponseIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerCryptocurrencyWalletListResponse"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "BrokerFeature": {
        "enum": ["holdings", "balance", "orders", "transfers", "identity"],
        "type": "string"
      },
      "BrokerFiatBalance": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Account balance currency",
            "nullable": true
          },
          "buyingPower": {
            "type": "number",
            "description": "BuyingPower indicates total amount of money the user can spend for buying stock. Always includes cash and\r\ncan also include margin",
            "format": "double",
            "nullable": true
          },
          "cryptoBuyingPower": {
            "type": "number",
            "description": "BuyingPower indicates total amount of money the user can spend for buying crypto.",
            "format": "double",
            "nullable": true
          },
          "cash": {
            "type": "number",
            "description": "Account cash indicates total amount of money",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerOptionDirection": {
        "enum": [
          "unknown",
          "buyToOpen",
          "buyToClose",
          "sellToOpen",
          "sellToClose",
          "buyToCover",
          "sellShort"
        ],
        "type": "string"
      },
      "BrokerOptionType": {
        "enum": ["unknown", "call", "put"],
        "type": "string"
      },
      "BrokerOrderCategory": {
        "enum": ["order", "trade", "ledger", "historyAction"],
        "type": "string"
      },
      "BrokerOrderPlaceType": {
        "enum": [
          "unknown",
          "market",
          "limit",
          "stopLoss",
          "stopLimit",
          "takeProfit",
          "netDebit",
          "netCredit",
          "exercise"
        ],
        "type": "string"
      },
      "BrokerOrderStatus": {
        "enum": [
          "unknown",
          "inProgress",
          "cancelled",
          "rejected",
          "failed",
          "success",
          "partiallyFilled",
          "expired"
        ],
        "type": "string"
      },
      "BrokerOrderTimeInForceType": {
        "enum": [
          "goodTillCanceled",
          "immediateOrCancel",
          "fillOrKill",
          "goodForDay",
          "postOnly",
          "unknown"
        ],
        "type": "string"
      },
      "BrokerOrderType": {
        "enum": ["unknown", "buy", "sell"],
        "type": "string"
      },
      "BrokerOrderValidationStatus": {
        "enum": ["success", "failed"],
        "type": "string"
      },
      "BrokerRefreshTokenRequest": {
        "required": ["refreshToken", "type"],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ]
          },
          "refreshToken": {
            "minLength": 1,
            "type": "string"
          },
          "createNewRefreshToken": {
            "type": "boolean",
            "description": "Optional, used when we the refresh token should be refreshed.\r\nCurrently this flow is supported by TD Ameritrade",
            "nullable": true
          },
          "accessToken": {
            "type": "string",
            "description": "Some institutions may require accessToken to be provided as well.\r\nIt's currently required by WeBull only",
            "nullable": true
          },
          "tradeToken": {
            "type": "string",
            "description": "Currently used to update WeBull trade token.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Additional metadata",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerRequestStatus": {
        "enum": ["succeeded", "failed", "notAuthorized"],
        "type": "string"
      },
      "BrokerTransactionsListRequest": {
        "required": ["authToken", "type"],
        "type": "object",
        "properties": {
          "authToken": {
            "minLength": 1,
            "type": "string",
            "description": "Auth token that allows connecting to the target institution"
          },
          "type": {
            "enum": [
              "robinhood",
              "eTrade",
              "alpaca",
              "tdAmeritrade",
              "weBull",
              "stash",
              "interactiveBrokers",
              "public",
              "coinbase",
              "kraken",
              "coinbasePro",
              "cryptoCom",
              "openSea",
              "binanceUs",
              "gemini",
              "cryptocurrencyAddress",
              "cryptocurrencyWallet",
              "okCoin",
              "bittrex",
              "kuCoin",
              "etoro",
              "cexIo",
              "binanceInternational",
              "bitstamp",
              "gateIo",
              "celsius",
              "acorns",
              "okx",
              "bitFlyer",
              "coinlist",
              "huobi",
              "bitfinex"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/BrokerType"
              }
            ],
            "description": "Type of the institution to connect"
          },
          "count": {
            "type": "integer",
            "description": "Number of records to include in the response. <br />\r\nDefault: `100` <br />\r\nMaximum: `250`",
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "description": "The cursor to retrieve the next page of transactions.\r\nProviding it will cause the response to only return changes after this update.\r\nIf this field is not provided, the history of transactions will be returned starting with the first-added transaction.",
            "nullable": true
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrokerCryptocurrencyTransactionStatus"
            },
            "description": "If this value is provided, result set is filtered to only include transaction with the provided statuses.",
            "nullable": true
          },
          "cryptocurrencyAddressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "description": "For cryptocurrency address the type of address is required.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrokerType": {
        "enum": [
          "robinhood",
          "eTrade",
          "alpaca",
          "tdAmeritrade",
          "weBull",
          "stash",
          "interactiveBrokers",
          "public",
          "coinbase",
          "kraken",
          "coinbasePro",
          "cryptoCom",
          "openSea",
          "binanceUs",
          "gemini",
          "cryptocurrencyAddress",
          "cryptocurrencyWallet",
          "okCoin",
          "bittrex",
          "kuCoin",
          "etoro",
          "cexIo",
          "binanceInternational",
          "bitstamp",
          "gateIo",
          "celsius",
          "acorns",
          "okx",
          "bitFlyer",
          "coinlist",
          "huobi",
          "bitfinex"
        ],
        "type": "string"
      },
      "CatalogLink": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Url to open Front catalog that should be presented to the end user.",
            "format": "uri",
            "nullable": true
          },
          "iFrameUrl": {
            "type": "string",
            "description": "Url to open Front catalog in iFrame that should be presented to the end user.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CatalogLinkIApiResult": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CatalogLink"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ChartItem": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          },
          "date": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CryptocurrencyAddressType": {
        "enum": [
          "ethAddress",
          "btcAddress",
          "ltcAddress",
          "solAddress",
          "algoAddress",
          "celoAddress",
          "cardanoAddress",
          "polygonAddress",
          "bnbAddress",
          "elrondAddress",
          "neoAddress",
          "xrpAddress",
          "flowAddress",
          "harmonyOneAddress",
          "tronAddress",
          "dogeAddress"
        ],
        "type": "string"
      },
      "CryptocurrencyCoinDescription": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CryptocurrencyWalletDescription": {
        "type": "object",
        "properties": {
          "cryptocurrencyWalletType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyWalletType"
              }
            ],
            "nullable": true
          },
          "cryptocurrencyAddressType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CryptocurrencyAddressType"
              }
            ],
            "nullable": true
          },
          "supportedCryptocurrencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CryptocurrencyCoinDescription"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CryptocurrencyWalletType": {
        "enum": [
          "coinbaseWallet",
          "metamask",
          "trustWallet",
          "myEtherWallet",
          "alphaWallet",
          "atomicWallet"
        ],
        "type": "string"
      },
      "FiscoIngredientScoreEnum": {
        "enum": ["veryPoor", "poor", "fair", "good", "exceptional"],
        "type": "string"
      },
      "IApiResult": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "ok",
              "serverFailure",
              "permissionDenied",
              "badRequest",
              "notFound",
              "conflict",
              "tooManyRequest"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiResultStatus"
              }
            ],
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayMessage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MfaScheme": {
        "enum": ["mfaCode", "challenge", "securityQuestion"],
        "type": "string"
      },
      "NftBlockchain": {
        "enum": ["ethereum", "polygon", "klaytn"],
        "type": "string"
      },
      "NftOrder": {
        "type": "object",
        "properties": {
          "orderSide": {
            "enum": ["buy", "sell"],
            "allOf": [
              {
                "$ref": "#/components/schemas/NftOrderSide"
              }
            ]
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "priceUsd": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "createdTimestamp": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "updatedTimestamp": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "symbolLogo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NftOrderSide": {
        "enum": ["buy", "sell"],
        "type": "string"
      },
      "NftPositionWithMarketValues": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "costBasis": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "contractAddress": {
            "type": "string",
            "nullable": true
          },
          "paymentTokenSymbol": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "imageOriginalUrl": {
            "type": "string",
            "nullable": true
          },
          "animationUrl": {
            "type": "string",
            "nullable": true
          },
          "backgroundColor": {
            "type": "string",
            "nullable": true
          },
          "marketplaceId": {
            "type": "integer",
            "format": "int64"
          },
          "tokenId": {
            "type": "string",
            "nullable": true
          },
          "numberOfSales": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "contractType": {
            "type": "string",
            "nullable": true
          },
          "contractName": {
            "type": "string",
            "nullable": true
          },
          "contractSchemaName": {
            "type": "string",
            "nullable": true
          },
          "contractSymbol": {
            "type": "string",
            "nullable": true
          },
          "contractDescription": {
            "type": "string",
            "nullable": true
          },
          "marketplacePermalink": {
            "type": "string",
            "nullable": true
          },
          "contractExternalLink": {
            "type": "string",
            "nullable": true
          },
          "creatorAddress": {
            "type": "string",
            "nullable": true
          },
          "currentOffer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftOrder"
              }
            ],
            "nullable": true
          },
          "lastSale": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NftOrder"
              }
            ],
            "nullable": true
          },
          "blockchain": {
            "enum": ["ethereum", "polygon", "klaytn"],
            "allOf": [
              {
                "$ref": "#/components/schemas/NftBlockchain"
              }
            ]
          },
          "addressExplorerLink": {
            "type": "string",
            "nullable": true
          },
          "twitterUsername": {
            "type": "string",
            "nullable": true
          },
          "marketValue": {
            "type": "number",
            "description": "Amount of NFTs multiplied by NFT value",
            "format": "double",
            "nullable": true
          },
          "portfolioPercentage": {
            "type": "number",
            "description": "What percentage of total portfolio value is taken by this NFT",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "SymbolTradingAllowance": {
        "enum": [
          "fractionalTradingAllowed",
          "fractionalTradingNotAllowed",
          "tradingNotAllowed",
          "fractionalTradingPossiblyAllowed"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "API-keys": {
        "type": "apiKey",
        "description": "Contact Front to get client Id and client Secret",
        "name": "X-Client-Id and X-Client-Secret headers",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "API-keys": []
    }
  ],
  "tags": [
    {
      "name": "Integrations"
    },
    {
      "name": "Portfolio",
      "description": "\r\n\r\n### Supported integrations:\r\n```Robinhood```\r\n```ETrade```\r\n```Alpaca```\r\n```TdAmeritrade```\r\n```WeBull```\r\n```Stash```\r\n```InteractiveBrokers```\r\n```Public```\r\n```Coinbase```\r\n```Kraken```\r\n```CoinbasePro```\r\n```CryptoCom```\r\n```OpenSea```\r\n```Binance```\r\n```Gemini```\r\n```CryptocurrencyAddress```\r\n```CryptocurrencyWallet```\r\n```OkCoin```\r\n```Bittrex```\r\n```KuCoin```\r\n```Etoro```\r\n```CexIo```\r\n```BinanceInternational```\r\n```GateIo```\r\n```Celsius```\r\n```Acorns```\r\n```Okx```\r\n```BitFlyer```\r\n```Coinlist```\r\n```Huobi```\r\n```Bitfinex```\r\n"
    },
    {
      "name": "Balance",
      "description": "\r\n\r\n### Supported integrations:\r\n```Robinhood```\r\n```ETrade```\r\n```Alpaca```\r\n```TdAmeritrade```\r\n```WeBull```\r\n```Stash```\r\n```InteractiveBrokers```\r\n```Public```\r\n```Coinbase```\r\n```Kraken```\r\n```CoinbasePro```\r\n```CryptoCom```\r\n```Binance```\r\n```Gemini```\r\n```OkCoin```\r\n```Bittrex```\r\n```KuCoin```\r\n```Etoro```\r\n```CexIo```\r\n```BinanceInternational```\r\n```GateIo```\r\n```Celsius```\r\n```Acorns```\r\n```Okx```\r\n```BitFlyer```\r\n```Coinlist```\r\n```Huobi```\r\n```Bitfinex```\r\n"
    },
    {
      "name": "Transactions",
      "description": "\r\n\r\n### Supported integrations:\r\n```Robinhood```\r\n```ETrade```\r\n```Alpaca```\r\n```TdAmeritrade```\r\n```WeBull```\r\n```Stash```\r\n```InteractiveBrokers```\r\n```Public```\r\n```Coinbase```\r\n```Kraken```\r\n```CoinbasePro```\r\n```CryptoCom```\r\n```Binance```\r\n```Gemini```\r\n```OkCoin```\r\n```Bittrex```\r\n```KuCoin```\r\n```Etoro```\r\n```CexIo```\r\n```GateIo```\r\n```Okx```\r\n```BitFlyer```\r\n```Coinlist```\r\n```Huobi```\r\n```Bitfinex```\r\n\r\n\r\n### Integration-specific notes:\r\n\r\n\r\n#### TdAmeritrade:\r\n\r\n\r\nBecause of limitations of TD Ameritrade API, it is not guaranteed that details of a new order\r\n\r\nwill be returned upon executing it.\r\n\r\n\r\n#### Binance:\r\n\r\n\r\nBecause of limitations of Binance API, initial loading of transaction history in Binance can take long time\r\n\r\ndepending on the size of the portfolio.\r\n\r\n\r\n#### OkCoin:\r\n\r\n\r\nGetting transactions history from OkCoin is not currently supported.\r\n"
    },
    {
      "name": "Transfers",
      "description": "\r\n\r\n### Supported integrations:\r\n```Robinhood```\r\n```Coinbase```\r\n```Kraken```\r\n```CoinbasePro```\r\n```CryptoCom```\r\n```Binance```\r\n```Gemini```\r\n```CryptocurrencyAddress```\r\n```CryptocurrencyWallet```\r\n```OkCoin```\r\n```Bittrex```\r\n```KuCoin```\r\n```BinanceInternational```\r\n```GateIo```\r\n```Okx```\r\n```Huobi```\r\n```Bitfinex```\r\n\r\n\r\n### Integration-specific notes:\r\n\r\n\r\n#### Robinhood:\r\n\r\n\r\nCryptocurrency transfers should be enabled in Robinhood settings. Transfers are disabled by default, enabling them for end users requires a review from Robinhood.\r\n\r\nPlease note:\r\n * `MfaCode` parameter is required to initiate a transaction in Robinhood.\r\n * The user's security settings should be configured to use an authenticator application.\r\n * Robinhood doesn't allow initiation of transactions if the authenticator application is not configured.\r\n\r\n\r\n#### Coinbase:\r\n\r\n\r\n`MfaCode` parameter should be used to initiate transactions in Coinbase.\r\n * If the end user's Coinbase account is configured to use text messages (SMS) for two factor authentication, the API will return `MfaRequired` status, and a text code will then be sent by Coinbase. The code is expected to be provided in the subsequent call using the `MfaCode` request field\r\n * If the account is configured to use an authenticator application, the API is expecting to get the code in the `MfaCode` request field.\r\n\r\n\r\n#### Kraken:\r\n\r\n\r\nKraken requires the explicit chain name to be provided (e.g. `Dogecoin` or `Ethereum (ERC20)`). The list of possible chains can be obtained by calling `symbol/details` endpoint.\r\n\r\nTo initiate a transaction, a Kraken Address Key name should be provided in `TargetAddress` field. Target address should be added using Kraken UI, then its name should be used.\r\n\r\n\r\n#### CoinbasePro:\r\n * CoinbasePro does not provide multiple chains per a symbol, so default chains are used for getting Deposit addresses.\r\n\r\n\r\n#### Binance:\r\n\r\n\r\n`Enable Withdrawals` permission should be given to the user's API key to initiate transfers with Binance Us.\r\n\r\nBinance requires adding the IP address to the list of trusted IPs to be able to create API keys with transfer permission.\r\n * Please reach out to Front to get the static IP address. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\r\n * By default, the permission to enable withdrawals is turned off. If the end user's API key does not have the permission, asset transfers will not be available.\r\n\r\n\r\n#### KuCoin:\r\n\r\n\r\nKuCoin requires adding the IP address to the list of trusted IPs to be able to create API keys with transfer permission.\r\n\r\n`Fee` parameter should be used to initiate a transaction in KuCoin.\r\n\r\nPlease note:\r\n * Please reach out to Front to get the static IP address. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\r\n * All currencies have their minimum `fee` and `amount` requirements. Please use `symbol/details` endpoint to get this data for a particular symbol.\r\n * KuCoin requires chain name to be provided for getting deposit address or initiating a cryptocurrency transfer. Some cryptocurrencies are supported over multiple chains. It's recommended to use `symbol/details` endpoint to get the list of supported chains and show it to the end user to select a target one.\r\n\r\n\r\n#### BinanceInternational:\r\n\r\n\r\n`Enable Withdrawals` permission should be given to the user's API key to initiate transfers with Binance International.\r\n\r\nBinance requires adding the IP address to the list of trusted IPs to be able to create API keys with transfer permission.\r\n * Please reach out to Front to get the static IP address. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\r\n * By default, the permission to enable withdrawals is turned off. If the end user's API key does not have the permission, asset transfers will not be available.\r\n\r\n\r\n#### GateIo:\r\n\r\n\r\nGate.io requires adding IP address to the list of trusted IP addresses to be able to initiate a cryptocurrency transfers.\r\n\r\nWithdrawal address should be already verified or added on the Gate.io UI (in mobile application or on the web site).\r\n * Please reach out to Front to get the static IP address for withdrawals. This address should be provided to the end user, and the user should be instructed to add it to the list of trusted IP addresses.\r\n * Only verified withdrawal blockchain addresses are allowed for withdrawal with Gate.io API.\r\n * Gate.io requires chain name to be provided for getting deposit address or initiating a cryptocurrency transfer. Some cryptocurrencies are supported over multiple chains. It's recommended to use `symbol/details` endpoint to get the list of supported chains and show it to the end user to select a target one.\r\n\r\n\r\n#### Huobi:\r\n\r\n\r\nWarning: Huobi does not refund executed deposits that are below the `Minimum Deposit Amount`\r\n * Please check the MinimumDepositAmount in Get Deposit Address response in order to avoid making a deposit below the minimum amount\r\n * Huobi does not allow withdrawals to addresses that are not white-listed, please add the address that you would like to withdraw to the white list of addresses through the UI so that a withrawal can be processed\r\n\r\n\r\n#### Bitfinex:\r\n * The hash of transfer is not available when making a transfer in Bitfinex. To get the hash please re-query the transfer using the transaction id.\r\n * Bitfinex does not separate sub-accounts when returning the list of transfers.Therefore the same list of transfers is returned for all Bitfinex sub-accounts.\r\n"
    },
    {
      "name": "FrontScore"
    },
    {
      "name": "News"
    }
  ]
}
